{
  "hash": "6b309728e45f1e9f3ef7e47c15a6caff",
  "result": {
    "markdown": "---\ntitle: \"UV: The Ultra-Fast Python Package Manager\"\nsubtitle: \"A Comprehensive Beginner's Guide to Modern Python Development\"\nauthor: \"Md Rasheduzzaman\"\ndate: last-modified\nformat:\n  html:\n    code-fold: false\n    toc: true\n    toc-depth: 3\n---\n\n## Introduction\n\nWelcome to the world of **UV** - the ultra-fast Python package manager that's revolutionizing how we work with Python projects! If you've ever been frustrated by slow pip installations, complex virtual environment setups, or dependency conflicts, UV is here to solve all those problems.\n\n### What is UV?\n\nUV is a modern, extremely fast Python package and project manager written in Rust. It's designed to replace multiple tools you might currently use:\n\n-   **pip** (package installation)\n-   **pip-tools** (dependency management)\n-   **pipx** (tool installation)\n-   **poetry** (project management)\n-   **pyenv** (Python version management)\n-   **virtualenv** (virtual environments)\n\n### Why Choose UV?\n\n::: callout-note\n## Key Benefits\n\n-   **‚ö° Lightning Fast**: 10-100x faster than pip\n-   **üîß All-in-One**: Replaces multiple tools\n-   **üîí Reliable**: Advanced dependency resolution\n-   **üêç Python Management**: Built-in Python version handling\n-   **üì¶ Modern**: Lock files for reproducible builds\n-   **üåê Cross-Platform**: Works on Windows, macOS, and Linux\n:::\n\n## Installation\n\n### Installing UV\n\nThe installation process is straightforward and works across all major platforms.\n\n**For macOS and Linux:**\n\n``` bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n**For Windows (PowerShell):**\n\n``` powershell\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n### Post-Installation Setup\n\nAfter installation, you need to refresh your terminal environment:\n\n**Option 1: Restart your terminal** (Recommended)\n\n**Option 2: Reload your shell configuration:**\n\n``` bash\nsource $HOME/.local/bin/env\n```\n\n### Verify Installation\n\nCheck if UV is installed correctly:\n\n``` bash\nuv --version\n```\n\nYou should see output similar to:\n\n```         \nuv 0.4.18 (Rust 1.81.0)\n```\n\n## Python Version Management\n\nOne of UV's most powerful features is its ability to manage Python versions without needing additional tools like pyenv.\n\n### List Available Python Versions\n\n``` bash\nuv python list\n```\n\nThis command shows: - Python versions already installed on your system - Python versions available for download\n\nExample output:\n\n```         \n * python3.13 -> /usr/bin/python3.13 (system)\n * python3.12 -> /usr/bin/python3.12 (system)\n   python3.11 -> download\n   python3.10 -> download\n```\n\n### Install Specific Python Versions\n\n``` bash\n# Install Python 3.13\nuv python install 3.13\n\n# Install Python 3.12\nuv python install 3.12\n\n# Install Python 3.11\nuv python install 3.11\n```\n\nUV handles the download and installation automatically!\n\n### Check Python Version Availability\n\n``` bash\nuv python find 3.13\n```\n\nThis returns the path to Python 3.13 if available, or indicates it can be downloaded.\n\n## Basic Script Execution\n\nLet's start with a simple example to see UV in action.\n\n### Your First UV Script\n\nCreate a file called `basic_example.py`:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#!/usr/bin/env python3\n\"\"\"\nBasic UV Demo Script\nRun with: uv run basic_example.py\n\"\"\"\ndef main():\n    print(\"Welcome to UV Tutorial!\")\n    print(\"Hello from UV - Ultra Fast Python Package Manager!\")\n    \n    # Show Python version and location\n    import sys\n    print(f\"\\nPython Version: {sys.version}\")\n    print(f\"Python Executable: {sys.executable}\")\n    print(f\"Platform: {sys.platform}\")\n    \n    # Show some basic info\n    import os\n    print(f\"\\nCurrent working directory: {os.getcwd()}\")\n    \n    print(\"\\n‚úÖ UV is working perfectly!\")\n    print(\"Now let's explore more advanced features!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\n### Run the Script\n\n``` bash\n# Run with default Python\nuv run basic_example.py\n\n# Run with specific Python version\nuv run --python 3.13 basic_example.py\n```\n\n### Temporary Dependencies\n\nHere's where UV shines! You can run scripts with dependencies without installing them permanently:\n\n``` bash\n# Run a script that needs the 'rich' library\nuv run --with rich script_name.py\n\n# Multiple temporary dependencies\nuv run --with rich --with requests --python 3.13 script_name.py\n```\n\nLet's create a more exciting example:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#!/usr/bin/env python3\n\"\"\"\nRich Library Demo\nRun with: uv run --with rich rich_demo.py\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.panel import Panel\nfrom rich.text import Text\nfrom rich.progress import track\nimport time\n\ndef main():\n    console = Console()\n    \n    # Welcome message\n    welcome_text = Text(\"üöÄ UV Package Manager Demo\", style=\"bold blue\")\n    panel = Panel(welcome_text, title=\"Python Tutorial\", border_style=\"green\")\n    console.print(panel)\n    \n    # Create a comparison table\n    console.print(\"\\n[bold yellow]Package Manager Comparison:[/bold yellow]\")\n    \n    table = Table(title=\"pip vs UV Comparison\")\n    table.add_column(\"Feature\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"pip\", style=\"red\")\n    table.add_column(\"UV\", style=\"green\")\n    \n    comparisons = [\n        (\"Installation Speed\", \"üêå Slow (10-60s)\", \"‚ö° Lightning Fast (<2s)\"),\n        (\"Dependency Resolution\", \"‚ùå Basic\", \"‚úÖ Advanced SAT solver\"),\n        (\"Virtual Environment\", \"‚ùå Manual setup\", \"‚úÖ Automatic\"),\n        (\"Lock Files\", \"‚ùå No lock files\", \"‚úÖ uv.lock for reproducibility\"),\n        (\"Python Version Mgmt\", \"‚ùå Needs pyenv\", \"‚úÖ Built-in\"),\n        (\"Parallel Downloads\", \"‚ùå Sequential\", \"‚úÖ Parallel processing\"),\n        (\"Caching\", \"‚ùå Limited\", \"‚úÖ Smart global cache\")\n    ]\n    \n    # Add rows with animation\n    for feature, pip_val, uv_val in track(comparisons, description=\"Loading comparison...\"):\n        table.add_row(feature, pip_val, uv_val)\n        time.sleep(0.3)\n    \n    console.print(table)\n    \n    # Summary\n    console.print(\"\\n[bold green]üéâ UV makes Python development 10x easier and faster![/bold green]\")\n    console.print(\"[italic]This rich formatting was installed temporarily with --with flag![/italic]\")\n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\nRun this with:\n\n``` bash\nuv run --with rich rich_demo.py\n```\n\n## Project Management\n\n### Creating a New Project\n\nUV makes it incredibly easy to start new Python projects:\n\n``` bash\n# Create a new directory and initialize a UV project\nmkdir my_awesome_project && cd my_awesome_project\nuv init\n```\n\nThis creates: - `pyproject.toml` - Project configuration file - `src/` - Source code directory structure - `main.py` - A starter Python file - Virtual environment management (automatic)\n\n### Project Structure\n\nAfter running `uv init`, you'll see:\n\n```         \nmy_awesome_project/\n‚îú‚îÄ‚îÄ pyproject.toml\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ my_awesome_project/\n‚îÇ       ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ       ‚îî‚îÄ‚îÄ py.typed\n‚îî‚îÄ‚îÄ main.py\n```\n\n### Script-Based Projects\n\nFor simple scripts, you can create a script-based project:\n\n``` bash\nuv init --script main.py --python 3.13\n```\n\nThis creates a minimal configuration for single-script projects.\n\n## Dependency Management\n\n### Adding Dependencies\n\nAdding packages to your project is straightforward:\n\n``` bash\n# Add regular dependencies\nuv add requests\nuv add beautifulsoup4\nuv add rich\n\n# Add with version constraints\nuv add \"django>=4.0,<5.0\"\nuv add \"requests>=2.25.0\"\n```\n\n### Development Dependencies\n\nSeparate your development tools from production dependencies:\n\n``` bash\n# Add development dependencies\nuv add --dev pytest\nuv add --dev black\nuv add --dev mypy\nuv add --dev ruff\n```\n\n### Optional Dependencies\n\nCreate optional dependency groups for different use cases:\n\n``` bash\n# Add optional dependencies\nuv add --optional web fastapi uvicorn\nuv add --optional data pandas numpy matplotlib\n\n# Install with optional groups\nuv sync --extra web\nuv sync --extra data\nuv sync --extra web,data\n```\n\n### Synchronizing Environment\n\nKeep your environment in sync with your project configuration:\n\n``` bash\n# Install all dependencies\nuv sync\n\n# Sync with fresh downloads (ignore cache)\nuv sync --refresh\n\n# Show what would be installed (dry run)\nuv sync --dry-run\n```\n\n### Understanding pyproject.toml\n\nThe `pyproject.toml` file is the heart of your UV project. It's written in TOML (Tom's Obvious Minimal Language), which is designed to be human-readable and easy to parse.\n\n**Key sections in pyproject.toml:**\n\n```toml\n[project]\nname = \"my-awesome-project\"\nversion = \"0.1.0\"\ndescription = \"A sample project using UV\"\nrequires-python = \">=3.8\"\ndependencies = [\n    \"requests>=2.25.0\",\n    \"rich>=10.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=6.0\",\n    \"black>=21.0\",\n    \"mypy>=0.800\",\n]\nweb = [\n    \"fastapi>=0.68.0\",\n    \"uvicorn>=0.15.0\",\n]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest>=6.0\",\n    \"black>=21.0\",\n]\n```\n\n**What each section means:**\n\n-   `[project]`: Basic project metadata and core dependencies  \n-   `[project.optional-dependencies]`: Optional groups you can install selectively  \n-   `[build-system]`: How to build/package your project  \n-   `[tool.uv]`: UV-specific configuration  \n\n### Lock Files: Ensuring Reproducibility\n\nUV automatically generates `uv.lock` files that contain the exact versions of all dependencies (including transitive dependencies) that work together:\n\n``` bash\n# Update lock file with latest compatible versions\nuv lock\n\n# Install exactly what's in the lock file\nuv sync --frozen\n```\n\n**Why lock files matter:**\n\n-   **Reproducibility**: Everyone on your team gets identical environments  \n-   **Security**: Prevents supply chain attacks through version pinning  \n-   **Debugging**: Easier to track down issues when versions are consistent  \n-   **CI/CD**: Ensures production matches development  \n\n**Lock file example snippet:**\n```toml\n[[package]]\nname = \"requests\"\nversion = \"2.31.0\"\nsource = { registry = \"https://pypi.org/simple\" }\ndependencies = [\n    { name = \"certifi\" },\n    { name = \"charset-normalizer\" },\n    { name = \"idna\" },\n    { name = \"urllib3\" },\n]\n```\n\n### Synchronization: Keeping Everything in Sync\n\nThe `uv sync` command is powerful - it ensures your environment exactly matches your project configuration:\n\n``` bash\n# Standard sync - installs missing, updates changed\nuv sync\n\n# Sync with specific extras\nuv sync --extra dev\nuv sync --extra web,dev\n\n# Frozen sync - only installs what's in uv.lock (production mode)\nuv sync --frozen\n\n# Refresh sync - ignores cache, downloads fresh\nuv sync --refresh\n\n# Dry run - see what would happen without doing it\nuv sync --dry-run\n```\n\n**What sync does:**\n\n1.   **Reads** `pyproject.toml` for project requirements\n2.   **Compares** with current environment\n3.   **Installs** missing packages\n4.   **Removes** packages not in configuration\n5.   **Updates** packages to match version constraints\n6.   **Creates/updates** `uv.lock` if needed\n\n**Best practices:**\n\n-   Run `uv sync` after pulling changes from git\n-   Use `uv sync --frozen` in production/CI\n-   Commit both `pyproject.toml` and `uv.lock` to version control\n\n## Real-World Example: Student Grade Calculator\n\nLet's build a practical classroom example - a student grade calculator that reads data from CSV files and generates reports.\n\n### Project Setup\n\n``` bash\nmkdir grade_calculator && cd grade_calculator\nuv init\nuv add pandas rich\n```\n\n### Create Sample Data\n\nFirst, create a sample CSV file `students.csv`:\n\n```csv\nname,math,science,english,history\nAlice Johnson,95,88,92,85\nBob Smith,78,91,85,88\nCarol Davis,88,95,90,92\nDavid Wilson,92,85,88,90\nEva Brown,85,92,95,88\nFrank Miller,90,88,85,92\nGrace Lee,88,90,92,85\nHenry Clark,92,88,90,88\nIvy Taylor,85,95,88,90\nJack Anderson,90,85,92,88\n```\n\n### The Grade Calculator Code\n\nCreate `grade_calculator.py`:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#!/usr/bin/env python3\n\"\"\"\nStudent Grade Calculator - Real world UV example\nDependencies: pandas, rich\n\nSetup commands:\nuv init\nuv add pandas rich\nuv run grade_calculator.py\n\"\"\"\n\nimport pandas as pd\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich.panel import Panel\nfrom rich.progress import track\nfrom rich.text import Text\nimport statistics\nfrom pathlib import Path\n\ndef create_sample_data():\n    \"\"\"Create sample student data if CSV doesn't exist\"\"\"\n    if not Path(\"students.csv\").exists():\n        data = {\n            'name': ['Alice Johnson', 'Bob Smith', 'Carol Davis', 'David Wilson', \n                    'Eva Brown', 'Frank Miller', 'Grace Lee', 'Henry Clark', \n                    'Ivy Taylor', 'Jack Anderson'],\n            'math': [95, 78, 88, 92, 85, 90, 88, 92, 85, 90],\n            'science': [88, 91, 95, 85, 92, 88, 90, 88, 95, 85],\n            'english': [92, 85, 90, 88, 95, 85, 92, 90, 88, 92],\n            'history': [85, 88, 92, 90, 88, 92, 85, 88, 90, 88]\n        }\n        df = pd.DataFrame(data)\n        df.to_csv('students.csv', index=False)\n        return df\n    return None\n#or load the file if you already have it, like below\ndef load_student_data():\n    \"\"\"Load student data from CSV file\"\"\"\n    try:\n        df = pd.read_csv('students.csv')\n        return df\n    except FileNotFoundError:\n        console = Console()\n        console.print(\"[red]Error: students.csv not found. Creating sample data...[/red]\")\n        return create_sample_data()\n\ndef calculate_grades(df):\n    \"\"\"Calculate grades and statistics\"\"\"\n    # Calculate average for each student\n    subject_columns = ['math', 'science', 'english', 'history']\n    df['average'] = df[subject_columns].mean(axis=1)\n    \n    # Assign letter grades\n    def get_letter_grade(avg):\n        if avg >= 90: return 'A'\n        elif avg >= 80: return 'B'\n        elif avg >= 70: return 'C'\n        elif avg >= 60: return 'D'\n        else: return 'F'\n    \n    df['letter_grade'] = df['average'].apply(get_letter_grade)\n    \n    return df\n\ndef display_student_report(df, console):\n    \"\"\"Display individual student grades\"\"\"\n    table = Table(\n        title=\"üìö Student Grade Report\",\n        show_header=True,\n        header_style=\"bold blue\",\n        border_style=\"green\"\n    )\n    \n    table.add_column(\"Student\", style=\"cyan\", width=15)\n    table.add_column(\"Math\", justify=\"center\", style=\"yellow\")\n    table.add_column(\"Science\", justify=\"center\", style=\"yellow\")\n    table.add_column(\"English\", justify=\"center\", style=\"yellow\")\n    table.add_column(\"History\", justify=\"center\", style=\"yellow\")\n    table.add_column(\"Average\", justify=\"center\", style=\"magenta\")\n    table.add_column(\"Grade\", justify=\"center\", style=\"bold green\")\n    \n    for _, student in track(df.iterrows(), description=\"Processing grades...\", total=len(df)):\n        # Color code the letter grade\n        grade_color = {\n            'A': 'bold green',\n            'B': 'green', \n            'C': 'yellow',\n            'D': 'orange1',\n            'F': 'red'\n        }.get(student['letter_grade'], 'white')\n        \n        table.add_row(\n            student['name'],\n            str(int(student['math'])),\n            str(int(student['science'])),\n            str(int(student['english'])),\n            str(int(student['history'])),\n            f\"{student['average']:.1f}\",\n            f\"[{grade_color}]{student['letter_grade']}[/{grade_color}]\"\n        )\n    \n    console.print(table)\n\ndef display_class_statistics(df, console):\n    \"\"\"Display class-wide statistics\"\"\"\n    subject_columns = ['math', 'science', 'english', 'history']\n    \n    # Calculate statistics\n    stats_table = Table(\n        title=\"üìä Class Statistics\",\n        show_header=True,\n        header_style=\"bold magenta\",\n        border_style=\"blue\"\n    )\n    \n    stats_table.add_column(\"Subject\", style=\"cyan\")\n    stats_table.add_column(\"Average\", justify=\"center\")\n    stats_table.add_column(\"Highest\", justify=\"center\", style=\"green\")\n    stats_table.add_column(\"Lowest\", justify=\"center\", style=\"red\")\n    stats_table.add_column(\"Std Dev\", justify=\"center\")\n    \n    for subject in subject_columns:\n        avg = df[subject].mean()\n        highest = df[subject].max()\n        lowest = df[subject].min()\n        std_dev = df[subject].std()\n        \n        stats_table.add_row(\n            subject.title(),\n            f\"{avg:.1f}\",\n            str(int(highest)),\n            str(int(lowest)),\n            f\"{std_dev:.1f}\"\n        )\n    \n    console.print(stats_table)\n    \n    # Grade distribution\n    grade_dist = df['letter_grade'].value_counts().sort_index()\n    \n    console.print(\"\\n[bold yellow]üìà Grade Distribution:[/bold yellow]\")\n    for grade, count in grade_dist.items():\n        percentage = (count / len(df)) * 100\n        console.print(f\"  {grade}: {count} students ({percentage:.1f}%)\")\n\ndef generate_report_file(df):\n    \"\"\"Generate a detailed report file\"\"\"\n    report_content = []\n    report_content.append(\"STUDENT GRADE REPORT\")\n    report_content.append(\"=\" * 50)\n    report_content.append(\"\")\n    \n    for _, student in df.iterrows():\n        report_content.append(f\"Student: {student['name']}\")\n        report_content.append(f\"  Math: {student['math']}\")\n        report_content.append(f\"  Science: {student['science']}\")\n        report_content.append(f\"  English: {student['english']}\")\n        report_content.append(f\"  History: {student['history']}\")\n        report_content.append(f\"  Average: {student['average']:.1f}\")\n        report_content.append(f\"  Letter Grade: {student['letter_grade']}\")\n        report_content.append(\"\")\n    \n    # Class statistics\n    report_content.append(\"CLASS STATISTICS\")\n    report_content.append(\"-\" * 30)\n    subject_columns = ['math', 'science', 'english', 'history']\n    for subject in subject_columns:\n        avg = df[subject].mean()\n        report_content.append(f\"{subject.title()} Average: {avg:.1f}\")\n    \n    report_content.append(f\"\\nClass Average: {df['average'].mean():.1f}\")\n    \n    # Save to file\n    with open('grade_report.txt', 'w') as f:\n        f.write('\\n'.join(report_content))\n\ndef main():\n    console = Console()\n    \n    # Header\n    header_panel = Panel(\n        \"[bold blue]üéì Student Grade Calculator[/bold blue]\",\n        subtitle=\"Powered by UV Package Manager\",\n        border_style=\"green\"\n    )\n    console.print(header_panel)\n    \n    # Load data\n    with console.status(\"[bold green]Loading student data...\", spinner=\"dots\"):\n        df = load_student_data()\n        if df is None:\n            console.print(\"[red]Failed to load data![/red]\")\n            return\n    \n    console.print(f\"[green]‚úÖ[/green] Loaded data for {len(df)} students\")\n    \n    # Calculate grades\n    with console.status(\"[bold blue]Calculating grades...\", spinner=\"bouncingBall\"):\n        df = calculate_grades(df)\n    \n    console.print(\"[green]‚úÖ[/green] Grades calculated successfully!\")\n    \n    # Display results\n    display_student_report(df, console)\n    console.print(\"\")\n    display_class_statistics(df, console)\n    \n    # Generate report file\n    generate_report_file(df)\n    console.print(f\"\\n[bold green]üíæ Detailed report saved to grade_report.txt[/bold green]\")\n    \n    # Summary\n    class_avg = df['average'].mean()\n    console.print(f\"\\n[bold cyan]üìä Class Average: {class_avg:.1f}[/bold cyan]\")\n    \n    highest_student = df.loc[df['average'].idxmax()]\n    console.print(f\"[bold green]üèÜ Top Student: {highest_student['name']} ({highest_student['average']:.1f})[/bold green]\")\n    \n    console.print(\"\\n[italic]This calculator demonstrates UV's dependency management![/italic]\")\n    console.print(\"[dim]Dependencies: pandas, rich[/dim]\")\n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\n### Run the Calculator\n\n``` bash\nuv run grade_calculator.py\n```\n\nThis will:\n\n1. **Load student data** from the CSV file (or create sample data if needed)\n2. **Calculate averages** and assign letter grades for each student\n3. **Display a beautiful grade report** with color-coded grades\n4. **Show class statistics** including averages, highest/lowest scores, and standard deviation\n5. **Generate a text report** saved to `grade_report.txt`\n6. **Display grade distribution** showing how many students got each letter grade\n\n**Features demonstrated:**\n\n- **Data processing** with pandas\n- **Beautiful terminal output** with rich\n- **File I/O** operations\n- **Statistical calculations**\n- **Error handling** for missing files\n- **Progress indicators** and status updates\n\n## Advanced Features\n\n### Virtual Environment Management\n\nWhile UV handles virtual environments automatically, you can also manage them manually:\n\n``` bash\n# Create a virtual environment\nuv venv\n\n# Create with specific Python version\nuv venv --python 3.13\n\n# Activate virtual environment (if needed)\nsource .venv/bin/activate  # On macOS/Linux\n.venv\\Scripts\\activate     # On Windows\n```\n\n### External Tools\n\nRun tools from PyPI without permanent installation:\n\n``` bash\n# Run httpie for API testing\nuv run --with httpie http GET https://api.github.com/users/octocat\n\n# Run cowsay for fun\nuv run --with cowsay cowsay \"UV is awesome!\"\n\n# Run black for code formatting\nuv run --with black black --check .\n```\n\n### Import and Export\n\nWork with existing projects and requirements:\n\n``` bash\n# Install from requirements.txt\nuv pip install -r requirements.txt\n\n# Export current dependencies\nuv export --format requirements-txt --output-file requirements.txt\nuv export --format pyproject-toml\n```\n\n### Build and Publish\n\nPackage and distribute your projects:\n\n``` bash\n# Build distribution packages\nuv build\n\n# Publish to PyPI\nuv publish\n```\n\n## Testing with UV\n\n### Setting up Tests\n\nAdd testing dependencies:\n\n``` bash\nuv add --dev pytest pytest-cov\n```\n\nCreate a simple test file `test_example.py`:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef add_numbers(a, b):\n    return a + b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef test_add_numbers():\n    assert add_numbers(2, 3) == 5\n    assert add_numbers(-1, 1) == 0\n    assert add_numbers(0, 0) == 0\n\ndef test_multiply_numbers():\n    assert multiply_numbers(2, 3) == 6\n    assert multiply_numbers(-1, 5) == -5\n    assert multiply_numbers(0, 10) == 0\n```\n:::\n\n\nRun tests:\n\n``` bash\n# Run all tests\nuv run pytest\n\n# Run with verbose output\nuv run pytest -v\n\n# Run with coverage\nuv run pytest --cov\n\n# Run specific test file\nuv run pytest test_example.py\n```\n\n## Performance Comparison\n\nHere's why UV is so much faster than traditional tools:\n\n| Operation                  | pip    | UV   | Improvement      |\n|----------------------------|--------|------|------------------|\n| Install requests           | 12.3s  | 0.8s | **15.4x faster** |\n| Install django             | 45.2s  | 2.1s | **21.5x faster** |\n| Install tensorflow         | 180.5s | 8.3s | **21.7x faster** |\n| Create virtual environment | 3.2s   | 0.1s | **32x faster**   |\n| Dependency resolution      | 8.7s   | 0.3s | **29x faster**   |\n\n::: callout-tip\n## Why is UV so fast?\n\n1.  **Written in Rust**: Compiled language with excellent performance\n2.  **Parallel Downloads**: Downloads multiple packages simultaneously\n3.  **Smart Caching**: Global cache shared across projects\n4.  **Advanced Resolution**: Efficient SAT solver for dependencies\n5.  **Optimized Algorithms**: Modern algorithms for package management\n:::\n\n## Best Practices\n\n### 1. Project Organization\n\n-   Always use `uv init` for new projects\n-   Keep `pyproject.toml` clean and well-documented\\\n-   Commit `uv.lock` to version control\n-   Use meaningful project names and descriptions\n\n### 2. Dependency Management\n\n-   Pin critical dependency versions in `pyproject.toml`\n-   Use `uv sync` regularly to keep environment updated\n-   Separate development and production dependencies\n-   Use optional dependencies for feature groups\n\n### 3. Python Version Management\n\n-   Specify Python version requirements in `pyproject.toml`\n-   Test your project with multiple Python versions\n-   Use `uv run --python X.Y` for version-specific testing\n-   Document Python version requirements\n\n### 4. Team Collaboration\n\n-   Always commit `pyproject.toml` and `uv.lock`\n-   Document special installation requirements\n-   Use consistent Python versions across team\n-   Provide clear setup instructions\n\n### 5. Performance Tips\n\n-   Use `uv cache` to share packages across projects\n-   Pre-install commonly used Python versions\n-   Use `uv sync --frozen` in production environments\n-   Leverage UV's parallel processing capabilities\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n**Issue: \"uv: command not found\"**\n\n``` bash\n# Solution: Restart terminal or reload shell\nsource ~/.bashrc  # or ~/.zshrc\n```\n\n**Issue: Python version not found**\n\n``` bash\n# Solution: Install the Python version first\nuv python install 3.13\n```\n\n**Issue: Dependencies not resolving**\n\n``` bash\n# Solution: Clear cache and try again\nuv cache clean\nuv sync --refresh\n```\n\n**Issue: Virtual environment issues**\n\n``` bash\n# Solution: Recreate virtual environment\nrm -rf .venv\nuv venv\nuv sync\n```\n\n### Useful Diagnostic Commands\n\n``` bash\n# Check UV configuration\nuv config\n\n# Show project information\nuv project info\n\n# Check dependency tree\nuv tree\n\n# Validate project\nuv check\n\n# Show cache location and size\nuv cache dir\nuv cache size\n\n# Clean cache\nuv cache clean\n```\n\n## Migration from Other Tools\n\n### From pip to UV\n\nReplace your pip workflows:\n\n``` bash\n# Old way\npython -m venv myenv\nsource myenv/bin/activate\npip install requests beautifulsoup4\n\n# New way\nuv init myproject\ncd myproject  \nuv add requests beautifulsoup4\n```\n\n### From Poetry to UV\n\nConvert Poetry projects:\n\n1.  Copy dependencies from `pyproject.toml` \\[tool.poetry.dependencies\\]\n2.  Run `uv init` in project directory\n3.  Add dependencies with `uv add package_name`\n4.  Remove Poetry files if desired\n\n### From pipenv to UV\n\nReplace Pipfile with UV:\n\n1.  Extract packages from Pipfile\n2.  Run `uv init`\n3.  Add packages with `uv add`\n4.  Use `uv run` instead of `pipenv run`\n\n## Example Workflow\n\nHere's a complete workflow for a new Python project:\n\n``` bash\n# 1. Create and navigate to project directory\nmkdir my_awesome_project && cd my_awesome_project\n\n# 2. Initialize UV project\nuv init\n\n# 3. Add your dependencies\nuv add requests beautifulsoup4 rich\nuv add --dev pytest black mypy ruff\n\n# 4. Install everything\nuv sync\n\n# 5. Run your application\nuv run main.py\n\n# 6. Run tests\nuv run pytest\n\n# 7. Format code\nuv run black .\n\n# 8. Type check\nuv run mypy .\n\n# 9. Lint code\nuv run ruff check .\n```\n\n## Conclusion\n\nUV represents the future of Python package management. By combining speed, reliability, and modern features into a single tool, it simplifies Python development workflows dramatically.\n\n### Key Takeaways\n\n-   **Speed**: UV is 10-100x faster than traditional tools\n-   **Simplicity**: One tool replaces many separate utilities\n-   **Reliability**: Advanced dependency resolution prevents conflicts\n-   **Modern**: Built-in support for lock files and reproducible builds\n-   **Cross-platform**: Consistent experience across operating systems\n\n### Next Steps\n\n1.  **Try UV Today**: Install UV and experiment with your current projects\n2.  **Migrate Gradually**: Start with new projects, then migrate existing ones\n3.  **Share with Team**: Introduce UV to your development team\n4.  **Stay Updated**: Follow UV development for new features\n5.  **Contribute**: Report issues and contribute to the UV community\n\n### Resources\n\n-   **Official Documentation**: <https://docs.astral.sh/uv/>\n-   **GitHub Repository**: <https://github.com/astral-sh/uv>\n-   **Community Discord**: Join discussions with other UV users\n-   **Migration Guide**: Official guides for switching from other tools\n\nHappy coding with UV! üöÄ\n\n::: callout-note\n## Did you know?\n\nUV is developed by Astral, the same team behind Ruff (the ultra-fast Python linter). Their focus on performance and developer experience makes UV an excellent choice for modern Python development.\n:::\n\n",
    "supporting": [
      "uv_tutorial_files"
    ],
    "filters": [],
    "includes": {}
  }
}