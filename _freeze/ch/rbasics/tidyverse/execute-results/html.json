{
  "hash": "2bbf4393293eebbe1a18a63860c287ae",
  "result": {
    "markdown": "---\ntitle: \"The tidyverse\"\nabstract: \"Pipe (%>%), Tibbles, dplyr-verbs, long/wide format and more.\"\n---\n\n\n\n\n# What is the Tidyverse?\n\nThe tidyverse is a collection of R packages designed to make data science easier and more intuitive. Think of it as a toolkit where all the tools work well together and share a similar design philosophy. The packages help you:\n\n-   Import data\n-   Clean and organize data\n-   Transform and manipulate data\n-   Visualize data\n-   Model data\n\n## Installing Tidyverse\n\nBefore we can use the tidyverse, we need to install it. First, let's install a helpful package manager called `pacman`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install pacman if you haven't already\n#install.packages(\"pacman\")\n\n# Load pacman\nlibrary(pacman)\n\n# Now use pacman to install and load tidyverse\n#pacman::p_load(tidyverse)\n# (install &) load packages\npacman::p_load(\n  broom,\n  conflicted,\n  here,\n  janitor,\n  naniar,\n  readxl,\n  tibble,\n  tidyverse\n)\n\n# Alternative: traditional installation\n# install.packages(\"tidyverse\")\n# library(tidyverse)\nconflicts_prefer(dplyr::filter) \nconflicts_prefer(dplyr::select)\n#dplyr::select()\n```\n:::\n\n\n## Core Tidyverse Packages\n\nHere are the main packages you'll use most often:\n\n| Package                                                                                                                                             | Purpose                   |\n|:-----------------------------------|:-----------------------------------|\n| [<img src=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png\" width=\"30\"/>](https://ggplot2.tidyverse.org/) **ggplot2** | Creating beautiful graphs |\n| [<img src=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png\" width=\"30\"/>](https://dplyr.tidyverse.org/) **dplyr**       | Data manipulation         |\n| [<img src=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tibble.png\" width=\"30\"/>](https://tibble.tidyverse.org/) **tibble**    | Modern data frames        |\n| [<img src=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tidyr.png\" width=\"30\"/>](https://tidyr.tidyverse.org/) **tidyr**       | Tidying data              |\n| [<img src=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readr.png\" width=\"30\"/>](https://readr.tidyverse.org/) **readr**       | Reading data files        |\n\n# Understanding Data Tables: Base R vs Tidyverse\n\n## Base R: data.frame\n\nIn base R, we work with `data.frame` objects. Let's look at a built-in dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R approach\n# Load the built-in PlantGrowth dataset\ndata(PlantGrowth)\n#data(iris)\n\n# Create a copy to work with\ndf <- PlantGrowth\n\n# View the first few rows\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  weight group\n1   4.17  ctrl\n2   5.58  ctrl\n3   5.18  ctrl\n4   6.11  ctrl\n5   4.50  ctrl\n6   4.61  ctrl\n```\n:::\n\n```{.r .cell-code}\n# Check the structure\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n'data.frame':\t30 obs. of  2 variables:\n $ weight: num  4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...\n $ group : Factor w/ 3 levels \"ctrl\",\"trt1\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n\n```{.r .cell-code}\n# Get summary statistics\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n     weight       group   \n Min.   :3.590   ctrl:10  \n 1st Qu.:4.550   trt1:10  \n Median :5.155   trt2:10  \n Mean   :5.073            \n 3rd Qu.:5.530            \n Max.   :6.310            \n```\n:::\n:::\n\n\n### Accessing columns in Base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1: Using $ notation\ndf$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59 5.87\n[16] 3.83 6.03 4.89 4.32 4.69 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26\n```\n:::\n\n```{.r .cell-code}\n# Method 2: Using brackets with column name\ndf[, \"weight\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59 5.87\n[16] 3.83 6.03 4.89 4.32 4.69 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26\n```\n:::\n\n```{.r .cell-code}\n# Method 3: Using brackets with column number\ndf[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59 5.87\n[16] 3.83 6.03 4.89 4.32 4.69 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26\n```\n:::\n:::\n\n\n## Tidyverse: tibble\n\nNow let's see how tidyverse handles the same data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to tibble\ntbl <- as_tibble(df)\n\n# View the tibble\ntbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 30 × 2\n   weight group\n    <dbl> <fct>\n 1   4.17 ctrl \n 2   5.58 ctrl \n 3   5.18 ctrl \n 4   6.11 ctrl \n 5   4.5  ctrl \n 6   4.61 ctrl \n 7   5.17 ctrl \n 8   4.53 ctrl \n 9   5.33 ctrl \n10   5.14 ctrl \n# ℹ 20 more rows\n```\n:::\n:::\n\n\n### Key differences with tibbles:\n\n1.  **Better printing**: Only shows what fits on screen\n2.  **Type information**: Shows data types under column names\n3.  **No partial matching**: More predictable behavior\n4.  **Preserves data types**: Doesn't automatically convert strings to factors\n\n### Accessing columns in tidyverse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Still can use $ notation\ntbl$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59 5.87\n[16] 3.83 6.03 4.89 4.32 4.69 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26\n```\n:::\n\n```{.r .cell-code}\n# Or use select() function (we'll learn more about this)\ntbl %>% select(weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 30 × 1\n   weight\n    <dbl>\n 1   4.17\n 2   5.58\n 3   5.18\n 4   6.11\n 5   4.5 \n 6   4.61\n 7   5.17\n 8   4.53\n 9   5.33\n10   5.14\n# ℹ 20 more rows\n```\n:::\n:::\n\n\n# Creating Plots: Base R vs ggplot2\n\n## Base R Plotting\n\nBase R has simple plotting functions that are quick but limited:\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Scatter plot\nplot(df$weight, main = \"Weight Values\",\n     xlab = \"Index\",\n     ylab = \"Weight\")\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-7-1.png){width=1500}\n:::\n\n```{.r .cell-code}\n# Bar plot with better labels\nplot(df$group, \n     main = \"Group Frequencies\",\n     xlab = \"Treatment Group\",\n     ylab = \"Frequency\",\n     names.arg = c(\"Control\", \"Treatment 1\", \"Treatment 2\"))\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-7-2.png){width=1500}\n:::\n:::\n\n\n## ggplot2 (Tidyverse)\n\nggplot2 builds plots in layers, like creating a painting. Let's break it down:\n\n### Understanding ggplot2 basics:\n\n1.  **ggplot()** - Creates the canvas\n2.  **aes()** - Stands for \"aesthetics\" - tells ggplot which data to use\n3.  **+** - Adds layers to your plot (like adding paint to canvas)\n4.  \\*\\*geom\\_\\*()\\*\\* - Geometric objects (the actual marks on the plot)\n\nLet's build our plots step by step:\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Scatter plot with index\n# Step 1: Create the canvas and specify the data\n# aes(x = ..., y = ...) maps data to x and y axes\nggplot(data = tbl, aes(x = 1:nrow(tbl), y = weight)) +\n  # Step 2: Add points to the plot\n  geom_point() +\n  # Step 3: Add labels\n  labs(title = \"Weight Values\", \n       x = \"Index\", \n       y = \"Weight\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-8-1.png){width=1500}\n:::\n\n```{.r .cell-code}\n# Bar plot\n# Step 1: Create canvas with data mapping\n# When we only specify x, ggplot counts occurrences\nggplot(data = tbl, aes(x = group)) +\n  # Step 2: Add bars (geom_bar counts automatically)\n  geom_bar() +\n  # Step 3: Add descriptive labels\n  labs(title = \"Group Frequencies\", \n       x = \"Group\", \n       y = \"Count\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-8-2.png){width=1500}\n:::\n:::\n\n\n### Breaking down the code:\n\n**For the scatter plot:**\\\n- `ggplot(data = tbl, ...)` - Use the 'tbl' dataset\\\n- `aes(x = 1:nrow(tbl), y = weight)` - Put row numbers on x-axis, weight values on y-axis\\\n- `geom_point()` - Draw points at each (x,y) coordinate\\\n- The `+` sign connects these layers together\n\n**For the bar plot:**\\\n- `aes(x = group)` - Put group categories on x-axis\\\n- `geom_bar()` - Count how many times each group appears and draw bars\\\n- ggplot automatically counts for us!\n\n### Think of it like a recipe:\n\n1.  Start with your data (ggplot + data)\\\n2.  Decide what goes where (aes)\\\n3.  Choose how to show it (geom_point, geom_bar, etc.)\\\n4.  Add finishing touches (labs, themes, colors)\n\n### Common geom\\_ functions and how to explore more:\n\nHere are the most common geometric layers you'll use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample data for demonstrations\ndemo_data <- tibble(\n  x = 1:10,\n  y = c(2, 4, 3, 7, 5, 8, 6, 9, 7, 10),\n  group = rep(c(\"A\", \"B\"), 5)\n)\n```\n:::\n\n\n**Essential geom\\_ functions:**\n\n| geom\\_ function    | What it draws           | When to use                              |\n|:-----------------------|:-----------------------|:-----------------------|\n| `geom_point()`     | Points/dots             | Scatter plots, showing individual values |\n| `geom_line()`      | Lines connecting points | Time series, trends                      |\n| `geom_bar()`       | Bars (counts data)      | Frequency of categories                  |\n| `geom_col()`       | Bars (uses y values)    | When you already have heights            |\n| `geom_histogram()` | Histogram               | Distribution of continuous data          |\n| `geom_boxplot()`   | Box plots               | Comparing distributions between groups   |\n| `geom_smooth()`    | Trend lines             | Adding regression/smooth lines           |\n\n### Quick examples:\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n# Line plot\nggplot(demo_data, aes(x = x, y = y)) +\n  geom_line() +\n  labs(title = \"geom_line()\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-10-1.png){width=1200}\n:::\n\n```{.r .cell-code}\n# Points + smooth line\nggplot(data = demo_data, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth() +\n  labs(title = \"geom_point() + geom_smooth()\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-10-2.png){width=1200}\n:::\n\n```{.r .cell-code}\n# Box plot by group\nggplot(demo_data, aes(x = group, y = y)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, \n               geom = \"point\", \n               shape = 23, \n               size = 3, \n               fill = \"orange\") +\n  geom_jitter(width=0.2) +\n  labs(title = \"geom_boxplot()\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-10-3.png){width=1200}\n:::\n:::\n\n\nUse `?pch` or `?shape` to know more about shapes.\n\n### How to discover more geom\\_ functions:\n\n1.  **In RStudio**: Type `geom_` and press TAB to see all available options\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Try this in your console:\n    # ggplot(data, aes(x, y)) + geom_[TAB]\n    ```\n    :::\n\n\n2.  **Get help on any function**:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Learn about a specific geom\n    ?geom_violin\n    \n    # See examples\n    example(geom_violin)\n    ```\n    :::\n\n\n3.  **Useful resources**:\n\n    -   [ggplot2 cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf) - Visual guide to all geoms\n    -   [R Graph Gallery](https://r-graph-gallery.com/) - Examples of every plot type\n    -   [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/#geoms) - Official reference\n    -   [from Data to Viz](https://www.data-to-viz.com) - Has robust way to show plotting options\n\n4.  **Experiment!** Try different geoms with your data:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Start with basic plot\n    p <- ggplot(tbl, aes(x = group, y = weight))\n    \n    # Try different visualizations\n    p + geom_boxplot()    # Box plot\n    p + geom_violin()     # Violin plot\n    p + geom_jitter()     # Scattered points\n    p + geom_dotplot(binaxis = \"y\")  # Dot plot\n    ```\n    :::\n\n\n### Pro tip: Layer multiple geoms!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can combine multiple geoms for rich visualizations\nggplot(tbl, aes(x = group, y = weight)) +\n  geom_boxplot(alpha = 0.5) +      # Semi-transparent box plot\n  geom_jitter(width = 0.2) +        # Add individual points\n  labs(title = \"Combining geom_boxplot() + geom_jitter()\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-14-1.png){width=1650}\n:::\n:::\n\n\n# The Magic of the Pipe (`%>%`) Operator\n\nThe pipe operator is one of the most powerful features in tidyverse. It makes your code readable by allowing you to chain operations together. It takes the output of the expression on its left and passes it as the first argument to the function on its right\n\n## Without pipes (Base R approach):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Get ctrl group only\nctrl_only <- df[df$group == \"ctrl\", ]\n\n# Step 2: Extract weight values\nweights <- ctrl_only$weight\n\n# Step 3: Calculate square root\nsqrt_weights <- sqrt(weights)\n\n# Step 4: Round to 1 decimal\nrounded <- round(sqrt_weights, 2)\n\n# Step 5: Sort\nsorted <- sort(rounded, decreasing = TRUE)\n\nsorted\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 2.47 2.36 2.31 2.28 2.27 2.27 2.15 2.13 2.12 2.04\n```\n:::\n:::\n\n\n## With pipes (Tidyverse approach):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(group == \"ctrl\") %>%   # Step 1: Get ctrl group\n  pull(weight) %>%              # Step 2: Extract weights\n  sqrt() %>%                    # Step 3: Square root\n  round(1) %>%                  # Step 4: Round\n  sort(decreasing = TRUE)                        # Step 5: Sort\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 2.5 2.4 2.3 2.3 2.3 2.3 2.1 2.1 2.1 2.0\n```\n:::\n:::\n\n\n**Tip**: To type `%>%` quickly in RStudio, use `Ctrl+Shift+M` (Windows/Linux) or `Cmd+Shift+M` (Mac)\n\n# Essential dplyr Functions\n\n## 1. `mutate()` - Add or modify columns\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a new column\ndf_copy <- df\ndf_copy$weight_kg <- df_copy$weight / 1000\n\n# Modify existing column\ndf_copy$weight <- df_copy$weight * 2\n\nhead(df_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  weight group weight_kg\n1   8.34  ctrl   0.00417\n2  11.16  ctrl   0.00558\n3  10.36  ctrl   0.00518\n4  12.22  ctrl   0.00611\n5   9.00  ctrl   0.00450\n6   9.22  ctrl   0.00461\n```\n:::\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl %>% \n  mutate(\n    weight_kg = weight/1000,  # Add new column\n    weight = weight*2\n  ) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 6 × 3\n  weight group weight_kg\n   <dbl> <fct>     <dbl>\n1   8.34 ctrl    0.00417\n2  11.2  ctrl    0.00558\n3  10.4  ctrl    0.00518\n4  12.2  ctrl    0.00611\n5   9    ctrl    0.0045 \n6   9.22 ctrl    0.00461\n```\n:::\n:::\n\n\n*N.B. We could make the doubling operation on the same `weight` column as well. It would make in-place modification. You have to think when to do that operation then.*\n\n## 2. `select()` - Choose columns\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select specific columns\ndf_subset <- df[0:nrow(df), c(\"group\", \"weight\")]\nhead(df_subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  group weight\n1  ctrl   4.17\n2  ctrl   5.58\n3  ctrl   5.18\n4  ctrl   6.11\n5  ctrl   4.50\n6  ctrl   4.61\n```\n:::\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- tbl %>% \n  select(group, weight)\n```\n:::\n\n\n*N.B. `select()` helps to rearrange columns as well.*\n\n## 3. `filter()` - Choose rows\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for weight > 5\ndf_filtered <- df[df$weight > 5, ]\ndf_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n   weight group\n2    5.58  ctrl\n3    5.18  ctrl\n4    6.11  ctrl\n7    5.17  ctrl\n9    5.33  ctrl\n10   5.14  ctrl\n15   5.87  trt1\n17   6.03  trt1\n21   6.31  trt2\n22   5.12  trt2\n23   5.54  trt2\n24   5.50  trt2\n25   5.37  trt2\n26   5.29  trt2\n28   6.15  trt2\n29   5.80  trt2\n30   5.26  trt2\n```\n:::\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl %>% \n  filter(weight > 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 17 × 2\n   group weight\n   <fct>  <dbl>\n 1 ctrl    5.58\n 2 ctrl    5.18\n 3 ctrl    6.11\n 4 ctrl    5.17\n 5 ctrl    5.33\n 6 ctrl    5.14\n 7 trt1    5.87\n 8 trt1    6.03\n 9 trt2    6.31\n10 trt2    5.12\n11 trt2    5.54\n12 trt2    5.5 \n13 trt2    5.37\n14 trt2    5.29\n15 trt2    6.15\n16 trt2    5.8 \n17 trt2    5.26\n```\n:::\n:::\n\n\n## 4. `arrange()` - Sort rows\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort by weight\ndf_sorted <- df[order(df$weight), ]\nhead(df_sorted)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n   weight group\n14   3.59  trt1\n16   3.83  trt1\n1    4.17  ctrl\n12   4.17  trt1\n19   4.32  trt1\n13   4.41  trt1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_sorted <- df[order(df$weight, decreasing=TRUE), ]\n```\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl %>% \n  arrange(weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 30 × 2\n   group weight\n   <fct>  <dbl>\n 1 trt1    3.59\n 2 trt1    3.83\n 3 ctrl    4.17\n 4 trt1    4.17\n 5 trt1    4.32\n 6 trt1    4.41\n 7 ctrl    4.5 \n 8 ctrl    4.53\n 9 ctrl    4.61\n10 trt1    4.69\n# ℹ 20 more rows\n```\n:::\n:::\n\n\n## 5. `summarise()` with `group_by()` - Calculate summaries\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean by group\naggregate(weight ~ group, data = df, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  group weight\n1  ctrl  5.032\n2  trt1  4.661\n3  trt2  5.526\n```\n:::\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl %>% \n  group_by(group) %>% \n  summarise(\n    mean_weight = mean(weight),\n    sd_weight = sd(weight),\n    n = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 3 × 4\n  group mean_weight sd_weight     n\n  <fct>       <dbl>     <dbl> <int>\n1 ctrl         5.03     0.583    10\n2 trt1         4.66     0.794    10\n3 trt2         5.53     0.443    10\n```\n:::\n:::\n\n\n# Working with Data Formats: Long vs Wide\n\nSometimes you need to reshape your data. Here's how:\n\n## Creating example data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a small dataset\nlong_data <- data.frame(\n  student = c(\"Alice\", \"Alice\", \"Alice\", \"Bob\", \"Bob\", \"Bob\"),\n  test = c(\"Math\", \"English\", \"Chemistry\", \"Math\", \"English\", \"Chemistry\"),\n  score = c(85, 90, 78, 82, 78, 90)\n)\n\nlong_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  student      test score\n1   Alice      Math    85\n2   Alice   English    90\n3   Alice Chemistry    78\n4     Bob      Math    82\n5     Bob   English    78\n6     Bob Chemistry    90\n```\n:::\n:::\n\n\n## Convert to wide format:\n\n### Base R approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using reshape function\nwide_base <- reshape(long_data, \n                     idvar = \"student\", \n                     timevar = \"test\", \n                     direction = \"wide\")\nwide_base\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  student score.Math score.English score.Chemistry\n1   Alice         85            90              78\n4     Bob         82            78              90\n```\n:::\n:::\n\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_data <- long_data %>% \n  pivot_wider(names_from = test, \n              values_from = score)\nwide_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 2 × 4\n  student  Math English Chemistry\n  <chr>   <dbl>   <dbl>     <dbl>\n1 Alice      85      90        78\n2 Bob        82      78        90\n```\n:::\n:::\n\n\n## Convert back to long format:\n\n### Tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_data %>% \n  pivot_longer(cols = -student,\n               names_to = \"test\",\n               values_to = \"score\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 6 × 3\n  student test      score\n  <chr>   <chr>     <dbl>\n1 Alice   Math         85\n2 Alice   English      90\n3 Alice   Chemistry    78\n4 Bob     Math         82\n5 Bob     English      78\n6 Bob     Chemistry    90\n```\n:::\n:::\n\n\n# Working with Factors (forcats)\n\nFactors are categorical variables. The order matters for plotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create example data\nplot_data <- tibble(\n  category = c(\"Low\", \"Medium\", \"High\", \"Low\", \"High\"),\n  value = c(10, 20, 30, 15, 35)\n)\n\n# Default alphabetical order\nggplot(plot_data, aes(x = category, y = value)) +\n  geom_col() +\n  labs(title = \"Default Order (Alphabetical)\")\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-32-1.png){width=1650}\n:::\n:::\n\n\n## Reordering factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify custom order\nplot_data %>% \n  mutate(category = fct_relevel(category, \"Low\", \"Medium\", \"High\")) %>% \n  ggplot(aes(x = category, y = value)) +\n  geom_col() +\n  labs(title = \"Custom Order\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-33-1.png){width=1650}\n:::\n:::\n\n\n# Working with Strings (stringr)\n\n## Common string operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example strings\nmessy_string <- \"  Hello   World!  \"\nnames <- c(\"John Smith\", \"Jane Doe\", \"Bob Johnson\")\n\n# Remove extra spaces\nstr_trim(messy_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Hello   World!\"\n```\n:::\n\n```{.r .cell-code}\nstr_squish(messy_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Hello World!\"\n```\n:::\n\n```{.r .cell-code}\n# Replace text\nstr_replace(names, \"John\", \"Jonathan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Jonathan Smith\"  \"Jane Doe\"        \"Bob Jonathanson\"\n```\n:::\n\n```{.r .cell-code}\n# Detect pattern\nstr_detect(names, \"John\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# Extract substring\nstr_sub(names, 1, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"John\" \"Jane\" \"Bob \"\n```\n:::\n:::\n\n\n# Practical Example: Complete Analysis\n\nLet's combine everything we learned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load and prepare data\nmtcars %>% \n  as_tibble() %>% \n  # Add car names as a column\n  mutate(car = rownames(mtcars)) %>% \n  # Select relevant columns\n  select(car, mpg, cyl, hp, wt) %>% \n  # Filter for efficient cars\n  filter(mpg > 20) %>% \n  # Add categorical variable\n  mutate(efficiency = case_when(\n    mpg > 30 ~ \"High\",\n    mpg > 25 ~ \"Medium\",\n    TRUE ~ \"Low\"\n  )) %>% \n  # Sort by mpg\n  arrange(desc(mpg)) %>% \n  # Show top 5\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n# A tibble: 5 × 6\n  car              mpg   cyl    hp    wt efficiency\n  <chr>          <dbl> <dbl> <dbl> <dbl> <chr>     \n1 Toyota Corolla  33.9     4    65  1.84 High      \n2 Fiat 128        32.4     4    66  2.2  High      \n3 Honda Civic     30.4     4    52  1.62 High      \n4 Lotus Europa    30.4     4   113  1.51 High      \n5 Fiat X1-9       27.3     4    66  1.94 Medium    \n```\n:::\n:::\n\n\n# Summary: Base R vs Tidyverse\n\n| Task           | Base R                    | Tidyverse                           |\n|------------------|-----------------------|-------------------------------|\n| Select columns | `df[, c(\"col1\", \"col2\")]` | `df %>% select(col1, col2)`         |\n| Filter rows    | `df[df$col > 5, ]`        | `df %>% filter(col > 5)`            |\n| Add column     | `df$new <- df$old * 2`    | `df %>% mutate(new = old * 2)`      |\n| Sort           | `df[order(df$col), ]`     | `df %>% arrange(col)`               |\n| Group summary  | `aggregate()`             | `df %>% group_by() %>% summarise()` |\n\n# Homework Assignment\n\n## Part 1: Basic Operations\n\nUsing the built-in `iris` dataset:\n\n## Plotting Challenge:\n\nCreate a visualization that shows the relationship between Petal.Length and Petal.Width, colored by Species, with:\n- Proper labels and title\n- A theme of your choice\n- Regression lines for each species\n\nAnd try more plotting as you wish!\n\n## Problem 1: Data Manipulation\n\nUsing the built-in `iris` dataset:  \n1. Convert it to a tibble  \n2. Create a new column called `Petal.Ratio` that is `Petal.Length / Petal.Width`  \n3. Filter for only \"setosa\" species with Sepal.Length > 5  \n4. Select only the Species, Sepal.Length, and your new Petal.Ratio columns  \n5. Arrange the results by Petal.Ratio in descending order  \n\n## Problem 2: Grouping and Summarizing\n\nUsing the full `iris` dataset:  \n\n1. Group by Species  \n2. Calculate the following for each species:  \n    - Mean Sepal.Length\n    - Standard deviation of Sepal.Width\n    - Minimum and maximum Petal.Length\n    - Count of observations\n3. Create a bar plot showing the mean Sepal.Length by Species\n\n## Problem 3: Data Reshaping\n\n1. Create a subset of iris with the first 3 rows of each species\n2. Add a row number within each species (call it \"plant_id\")\n3. Convert this to wide format where:\n    - Each row represents one plant_id\n    - Columns show the Sepal.Length for each species\n\n## Submission Instructions:\n\n- Submit your R Markdown file\n- Include comments explaining your code, discuss with your peer and improve\n- Make sure your code runs without errors\n- Due date: Friday 10PM BD Time\n\n## Grading Rubric:\n\n- Code correctness: 70%\n- Code style and comments: 20%\n- Output interpretation: 10%\n\nGood luck! Remember to use the pipe operator `%>%` to make your code readable!\n",
    "supporting": [
      "tidyverse_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}