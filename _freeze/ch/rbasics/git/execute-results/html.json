{
  "hash": "ceb0485ab06d34517f15a575850ce089",
  "result": {
    "markdown": "---\ntitle: \"Git and CLI\"\nabstract: \"Git, GitHub and some basic shell commands\"\nformat: html\nexecute:\n  echo: true\n  eval: false  # disables code execution globally\n---\n\n\n\n\n# Lesson Summary\n\n**So, the summary goes first.** Once you finish reading, fall back here to remind you the important things and steps of working with `git`and `GitHub` and terminal. Regular practice will be easier in this way.\n\n-   `git` and `GitHub` configuration is a bit tedious process (to make it secure for us though), but we are supposed to do it one time only. We don't need to do it again and again.\n\n-   Another important aspect is we are learning \"how to follow instructions\".\n\n-   Many personal things in programming are in generic terms. We have to replace them accordingly. For example, `your_name@gmail.com`, `your_user_name`, `your_password`, `path/to/your/file`,`your meaningful message` etc.\n\n-   Learning to ask questions.\n\n-   The standard workflow to work with a GitHub repository follows these few steps:\n\n1.  Go to your GitHub account → Find the `+` sign and click on it → Click on `New Repository`.\n2.  Clone it in your computer (inside your preferred folder) running `git clone git@github.com:yourusername/test1.git`. Don't forget to replace `git@github.com:yourusername/test1.git` with the SSH link you copied for your repo.\n3.  Make change in your folder adding or creating files/folders. You can optionally check status of your folder running `git status`.\n4.  Stage/prepare/add them all to git running `git add .`.\\\n5.  Commit/decorate it with a meaningful message running `git commit -m \"your meaningful message\"`.\n6.  Now push it to your remote (GitHub) repo running `git push origin main`.\n\n-   We are recognizing code chunks in the document/page. Single line, multi-line code, and how to run them (run codes from the code chunks, even if I don't explicitly say **Run**). Did you catch that running a code means writing (or copy-pasting) and pressing \"Enter\"/\"Return\" key on keyboard? Also, run multi-line code line by line, meaning next line after finishing the previous one running.\n\n-   Getting used to different vocabulary related to Computer and programming.\n\n-   We learned navigating the file system from the bash/terminal.\n\n# Prelude\n\nWell, why `git`and `command line` at the very beginning? I want you to be able to interact with me for all the lessons, take part in the GitHub discussion and make you competent with basic git tasks (`push`and `pull`). You actually need 4-5 lines of code to push and pull. You will associate bash alternatives to Windows' Graphical User Interphase (GUI, which is mouse clicking). Just get used to these stuffs. You will get the sense of accomplishment everyday. You know what, people get demotivated just because they don't get the sense of accomplishment. Smaller task completion helps to pile up \"done\" things. I am here holding your hands. Don't afraid to tinker and ponder around. You can always delete the problematic folder(s).\n\nYou can push the codes/scripts from the classes or your own practice codes. You will FEEL better and stronger after a bit of hustling!\n\n***`GET ENGAGED!`***\n\n# Intro\n\nGitHub is just like Google Drive, Dropbox or similar where you can `upload` (or `push`) files and folders of your project/package. What is special about the GitHub repositories then? Well, they are tracked for changes. How so? Well, `git` does that. `git` is the version control system (or tool) to track changes you make in a specific directory/repository (directory means folder as well). So you can have snapshot of your changes and fall back and forth if needed.\n\n**Imagine this situation:** You made a working version of whatever you are doing/making. But then you were trying to polish it more. And alas, your so-called polishing is messing you up! You don't know what is wrong! You closed the file many times and you can't just `undo` and `redo` things. What would you do now except cursing (or other similar behavior of frustration)? Here comes `git` in your rescue. It kept the snapshot of your previous working version(s) in GitHub (if pushed) and you can easily fall back and forth (`clone`/`download`/`pull` it in your machine again). Maybe, the terms \"upload\" and \"download\" make a bit more sense, rather than `push` and `pull`/`clone`! But you got the idea (equivalent), right?\n\n# Set git and GitHub\n\n## Install Git\n\n### For Windows\n\n-   **Download:** Download `Git` from <https://git-scm.com/download/win>\n-   **Install:** Now install, accept the default settings while installing\n-   **Open git bash:** After installation, open `Git Bash` (not cmd/PowerShell). Find it and open by double clicking. Just keep it open, nothing else. We will return to this a bit later.\n\n### For MacOS\n\nIt should already be there. Open your terminal/shell now (Press `\"command\"` + `\"space\"` buttons together and write \"terminal\". Choose the terminal). Then run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit --version\n```\n:::\n\n\nIf Git isn’t installed, macOS will prompt you to install the Xcode Command Line Tools. Click \"Install\" and you are done. But find the recommended below. Just run these two commands to keep your directory/repo clean.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho .DS_Store >> ~/.gitignore_global\ngit config --global core.excludesfile ~/.gitignore_global\n```\n:::\n\n\nMacOS makes `.DS_Store` which is not really needed for any projects (this is just an internal thingy for MacOS). But to make it work, we should have chosen the option for a gitignore file while opening the GitHub repository. We will know more about it later. Don't worry. We are adding it to gitignore and telling git to ignore it for file tracking.\n\n### For Ubuntu/Debian\n\nOpen your terminal (Press `Ctrl + Alt + T`.) and run these two commands one after another:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo apt update\nsudo apt install git\n```\n:::\n\n\nProvide your password if prompted. You are all set!\n\n## Create a GitHub Account\n\n-   Now go to <https://github.com> → Sign up with your email\n-   Choose a username and password. Make the username easy to remember (for example, with your names, maybe), password should be as difficult as possible.\n\nHint, it can be different than your email password. Use combination of capital and small letters, numbers and special characters like \"\\@\", \"!\", \"?\", etc.\n\n-   Verify email (with the OTP) and you are set.\n\n## Set Up Git (for the first time only)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n```\n:::\n\n\n::: callout-note\n## Info!\n\nIt is a multi-line code chunk (2 lines). Run the first one first, then the second one.\n:::\n\n::: callout-warning\n## Stop!\n\nHere, `Your Name` and `your_email@example.com` means your user name (the one you set up just a bit ago. You don't remember? Explore your GitHub account, you will see it there.) and the email address you used for GitHub. Use them correctly. Space, punctuation marks, capital or small letters should exactly match (Don't be a \"Murad takla\").\n:::\n\nYou can check your config:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global --list\n```\n:::\n\n\nIsn't it showing things correctly? It should!\n\n## Generate SSH Key and Connect to GitHub\n\n**Recommended, need to do only once**\n\n::: callout-warning\n## Stop!\n\nThis step is creating a private and public key for you to identify that it is really you who is interacting (pushing, pulling, cloning for example) with the GitHub account later. We only upload the public key to GitHub, but never the private key. That is exclusively for yourself. Never share it with anybody.\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh-keygen -t ed25519 -C \"you@example.com\"\n```\n:::\n\n\n**Read and just press Enter for all the prompts**\n\n::: callout-warning\n## Stop!\n\nDid you replace `you@example.com` with yours? If not, do it again replacing it with correct email address for your GitHub account.\n:::\n\n::: callout-warning\n## Stop!\n\nDid you press Enter or return key multiple times or just kept staring at the screen? Read the messages on your screen to understand, and keep pressing Enter.\n:::\n\n## Add SSH Key to GitHub\n\nNow, we are going to add the public key to GitHub. But do we know it? Get it this way:\n\n1.  Run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat ~/.ssh/id_ed25519.pub\n```\n:::\n\n\n2.  Copy the output: Be careful here. Just copy the output. No extra space after your email address (i.e. till `.com`).\n\n::: callout-warning\n## Stop!\n\nDid you copied it correctly? Check again, maybe.\n:::\n\n::: {.callout-note collapse=\"true\"}\n## How is your key?\n\nIt has 3 fields separated with 2 spaces. Did you notice that?\n:::\n\n3.  Go to GitHub → Settings → SSH and GPG keys → New SSH Key\n\n**Title:** Whatever you want (but keep it simple, like `my ssh key`) **Paste the key** you copied and save it by clicking on `Add SSH key`. You are done.\n\n::: callout-warning\n## Stop!\n\nDid you copy-pasted it correctly and is the key visible if you check under `SSH and GPG keys` now? It shows only the second field of your key though. If not, it is not done correctly. Work around!\n:::\n\n4.  Test it:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh -T git@github.com\n```\n:::\n\n\n::: callout-note\n## How is it?\n\nHi `Your_user_name`! You've successfully authenticated, but GitHub does not provide shell access.\n:::\n\nIt is totally fine, ignore the warning.\n\nSetting and configuration is done. Voila!\n\n# Basic Git Workflow (Local + GitHub)\n\n### Create a New Repository on GitHub\n\n1.  Go to your GitHub account Find the `+` sign and click on it → Click on `New Repository`. Or there is another way. Find it.\n2.  Name it (e.g., test1).\n3.  Don’t initialize with README (we’ll do it ourselves). You can decide to add a `.gitignore` template from the drop-down as well. But don't do it now.\n4.  Keep it public (as the default setting).\n5.  Save it by clicking on `Create repository`.\n\n### Clone It to Your Computer Now:\n\nSo, the repository (basically a folder in GitHub) is in GitHub server. It is not in your machine. Let's copy it exactly how it is in our computer.\n\n-   At first, go to correct location you want to be in. For example, let's say, you want to be inside the `Downloads` folder. Run this:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd Downloads\n```\n:::\n\n\n::: callout-note\n## Information\n\nIt works because you are inside the home/root directory (denoted as `~`) when you just open the terminal or git bash.\n:::\n\nWell, If you want to be inside the `Desktop` or `Documents` folder, you could run `cd Desktop` or `cd Documents` instead of the one for `Downloads`. You got the idea for the navigation, right? Just use the correct folder name. Now, go to your GitHub repo. Click on `<>Code` and select `SSH` (or find the SSH link of your repo). Copy the link from there. Use/replace the link in the code below:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone git@github.com:yourusername/test1.git\n```\n:::\n\n\n::: callout-warning\n## Warning\n\nDid you replace the `git@github.com:yourusername/test1.git` with your copied ssh link?\n:::\n\nSo, you are copying/cloning your empty repository you just have created to your laptop/machine. Good job! Ignore the warning from `git`. The warning is ok, right?\n\n### Add a new `README.md` file\n\nLet's add a new README.md file to our empty repo now. Poeple add basic information about the repo in this file. But it is something simple for us for now. Let's proceed!\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd test1 \necho \"# Hello GitHub\" > README.md\nls\n```\n:::\n\n\n::: callout-note\n## Information\n\nSo, it is a new file we created, right? It is on our computer, but not in our remote (GitHub) repository. So, let's proceed to upload/`push` it to our GitHub repo named `test1`. It won't go to other repo. Think about the logic. Why should it go to other repo/folder, right?\n:::\n\n::: callout-note\n## Diversion\n\n`echo \"# Hello GitHub\"` actually prints `# Hello GitHub` on the terminal/git bash (you can check/run by copy-pasting only this part). The `>` operator is sending `# Hello GitHub` to the file named `README.md`. We did not need to create this file from before. See the power of `echo`, `>` together.\n:::\n\n### Track and Commit Changes\n\nWe said `git` is a tracking tool (version control system). So, let's see how it tracked our `test1` folder.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit status\n```\n:::\n\n\nIsn't it showing that our `README.md` file is untracked (in red color)?\n\n::: {.callout-note collapse=\"true\"}\nIt shows the status of the files and folders. You see the untracked files here. Untracked files mean the ones those are different than your GitHub repo. If you add something more in any of your file in this folder -- even an extra space, it would be a change of the file and it would be stated as \"untracked\".\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add README.md\n```\n:::\n\n\nIt stages/prepares the untracked files to be added.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit commit -m \"Add README\"\n```\n:::\n\n\nYou add a meaningful commit message for yourself to remind you what you did in this step (a decoration). Make it meaningful. But all these steps are still on your local machine. You have prepared (by using `git add`) and decorated (by using `git commit -m`) your file(s). You are just one step away to `push` it to your remote repo. Just run the command below, and feel like a soft-dev!\n\n### Push to GitHub\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit push origin main\n```\n:::\n\n\nGo to your GitHub repo to see the changes. Refresh your browser, maybe.\n\n::: callout-note\n`git status` is not a compulsory thing to do/run, but the other 3 downstream commands are. In summary, you should always run these 3 commands to push something:\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add README.md    # Stage the specific file named README.md\ngit commit -m \"Add README\" #you added a meaningful message for yourself\ngit push origin main #push it now to main branch\n```\n:::\n\n\n::: callout-note\n## What are the things with `#` sign?\n\nThose are comments to tell you about the commands task (or anything). One just need to write a `#` sign to make it a comment in R.\n:::\n\nWell, if you have added or created many files and folders inside this `test1` folder (in whatever way), you should run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add .\n```\n:::\n\n\nThe `.` means **\"everything\"** inside the current folder/directory. Well, you could run it all the time instead of mentioning specific file name (i.e. `README.md`) earlier.\n\n::: callout-note\n## Note\n\nYou can add and push as many files as you want. Just create/modify them inside the correct folder/directory and instead of `git add README.md`, use `git add .` when you think you're done modifying. The dot here means all the files/folders. Then you could follow the next steps as usual. So, you could do:\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add .\ngit commit -m \"a meaningful message for you\"\ngit push origin main\n```\n:::\n\n\n::: callout-important\nDid you replace `\"a meaningful message for you\"` to a real meaningful one for you?\n:::\n\nCheck your GitHub repo now! Refresh, maybe!\n\n*You are feeling like a PRO, no?*\n\nLet's practice some more Linux navigation. See a toy folder structure below:\n\n``` text\n~/\n├── Desktop/\n│   ├── project_overview.pdf\n│   └── meeting_notes.txt\n├── Documents/\n│   ├── resume.docx\n│   ├── thesis/\n│   │   ├── chapter1.md\n│   │   └── references.bib\n│   └── tax_2024.xlsx\n└── Downloads/\n    ├── folder1/\n    │   ├── file1.txt\n    │   ├── file2.txt\n    │   └── notes.md\n    ├── folder2/\n    │   ├── data.csv\n    │   ├── report.docx\n    │   └── image.png\n    └── folder3/\n        ├── script.sh\n        ├── config.json\n        └── README.md\n```\n\n::: callout-important\nIf you had your git bash opened from before, close it and reopen it. Notice that there is no folder names after `~` sign in your git bash.\n:::\n\nIn real life, you have many more things like `Pictures`, `Video`, `Music` and others under `~`, right? That's why this one is a toy example.\n\nSo, `Downloads` is inside our `~` directory. We are inside our `~` directory when we open the git bash or terminal for the first time.\n\n::: callout-important\n`HOME`or `root` directory is shown as `~` in your computer. Notice the things in different color in your terminal or git bash where you write commands.\n:::\n\nCheck your location (current working directory) by running:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n:::\n\n\n`pwd` means \"print working directory\". It means print one's current location in the file system. Then we should try to see which files are inside this folder, right? Run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n:::\n\n\n::: callout-note\n`ls` means list everything at that location/folder. According to the picture, we can go to `Downloads` or `Documents` or `Desktop` folder from `~` (it is also called `root`. Isn't the folder structure looks like a upside-down tree? That's why it is the `root`).\n\nLet's say we are focusing on the `Downloads` folder now. Let's go inside `Downloads`. Wait a moment. How would you do that in Windows? You would see `Downloads` now and would double click on it, right (open your file explorer from Windows to see things while reading and running commands to associate better)? But there is no double click in a git bash or terminal. `cd` does it for us. Do you see what is equivalent to that double click? Do you see what is equivalent to seeing the file in Windows and folder structure in the git bash or terminal? It's not so difficult. Think......\n\nOk, follow me exactly now, run these commands:\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd Downloads\nmkdir -p folder1 folder2 folder3\nls\n```\n:::\n\n\nI assume you have many files and folders inside `Downloads`. But you should see `folder1`, `folder2`, `folder3` among others now. Don't worry. Just run it. We are using `-p` flag/parameter with `mkdir` command. It says `mkdir` to make the directories, but if the folder(s) exist, it won't make any changes there. So, your files and folders are safe.\n\nLet's navigate out of `Downloads` now and list everything inside `Downloads` in another way.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\nls Downloads\n```\n:::\n\n\nDid you notice that I used the folder name `Downloads` after `ls` command now? Well, where are we? Inside the root directory (`~`), right? Since we are at our root directory, if we run only `ls`, it will list everything inside the root (`~`) directory. Did we wanted that? So, we have to write the folder name/path and `Downloads` is just a step forward from `~`. That's why we used `ls Downloads` to list everything inside the `Downloads` folder. We could go inside `Downloads` folder first and then run `ls` only. We would achieve the same thing (try it if you want and come back to the `root` directory again).\n\n`Downloads` is just one-step ahead from our root, do you catch this logic? If you wanted to list everything inside the `folder3` folder, you could run `ls Downloads/folder3` from the `~` directory. Do you see its logic? If not, think about this:\n\n-   How far is your father's generation from your grandfather's?\n-   How far behind is your grandfather's generation compared to your father's?\n-   How far is your generation from your grandfather's?\n-   How far is your generation from your father's?\n-   How far behind is your father's generation from yours?\n-   How far behind is your grandfather's generation from yours?\n-   Isn't the generation/level of your father, aunt(s) and uncle(s) the same? What about yours, your siblings or cousins?\n\nThink of a family tree, computer filesystem is having exactly the same logic. Try to associate (Maybe draw the toy example from above horizontally, it will help to see things which belong to the same level).\n\nIn our toy example above, `folder1`, `folder2`, `folder3` are on the same level/generation (they are children of `Downloads`, and `Downloads` is their parent). Similarly, `Downloads`, `Documents` and `Desktop` are on the same level (children of `~`, so they are siblings). Makes sense?\n\nDo you see how powerful this simple navigation logic is? You can list (using `ls` command) way too far (folder inside folder inside folder inside folder .......\\[or folder outside folder outside folder outside folder ......\\]) from where you are.\n\n**Optional:** Maybe search for `absolute path` and `relative path`, and read a bit.\n\nLet's go inside `Downloads` now.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd Downloads\nls\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n`ls` is equivalent of seeing things inside a folder in Windows. Did you catch that?\n:::\n\n`ls` shows `folder1`, `folder2`, `folder3` among many other things, right?\n\n**Q.** How to go inside, let's say, `folder2` now, and make a file named `data.csv` file? Well, since you are already inside `Downloads`, you need to go one step forward to go inside of it and create the (empty) file. Run one after another:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd folder2\ntouch data.csv\n```\n:::\n\n\n**Do you see what `touch` is doing?**\n\n::: {.callout-note collapse=\"true\"}\nWell, `touch` is creating the file (named `data.csv`). Run `ls` to see who else is the resident there. As expected, no?\n:::\n\n*Q.* How to come out of `folder2` to `Downloads` again?\n\n::: {.callout-note collapse=\"true\"}\nThink backward now, see the picture for the folder structure to get visual help. You need to go one step behind, right? So? How to go backwards?\n:::\n\nRun this:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\n```\n:::\n\n\n**Could you relate what `..` is meaning here?**\n\n::: {.callout-note collapse=\"true\"}\nWell, one step/folder backward, right?\n:::\n\n::: callout-note\nAhha.... Wondering why do we have `/` after the folder names? Well, that is the way to denote a folder. We could use `ls Downloads/`, but we dropped the `/` since we are not denoting any more folder after `Downloads`. If you want to see things inside `folder3`, we should have use `ls Downloads/folder3` or `ls Downloads/folder3/` from the `~` directory, we could not do it like `ls Downloadsfolder3` or `ls Downloadsfolder3/`. Now it is looking for `Downloadsfolder3` folder which is not there in your computer. You will get error stating `cd: no such file or directory:`.\n\n**Another point:** Did you notice that `ls Downloads/folder3` is just listing everything inside `Downloads/folder3` on the fly, we are not really changing our physical location there, we are still in `~`. To go inside `folder3`, we should use `cd Downloads/folder3`. Caught this correctly? Ponder....\n:::\n\n# Homeworks\n\n1.  Go inside `folder1`, `folder2`, `folder3` folders one after another and create the empty files as you see in the picture (with exact names). If you can do it, you are almost a PRO in Linux/command line.\n\n2.  Now, remove all the folders running this command below:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    rm -r folder1 folder2 folder3\n    ```\n    :::\n\n\n    Here, `rm` means \"remove\" and `-r` means \"recursively\". So, delete the 3 mentioned directories recursively. It needs to recurse since the folders are not empty (have files, although empty for us. But they can have contents as well). Deleting/just running the command is your task. Did it work?\n\n3.  Make all the folders and files as it is shown in the toy file structure again. Don't delete this time. Keep them.\n\n4.  Navigate to `Downloads` again. Stay there. Next task is coming.\n\n5.  Go to your GitHub account and make a repository named `hw_repo1`. **Clone** it inside your `Downloads` folder (navigate to this folder correctly after cloning). Add something (files, folder, whatever) in this folder (`hw_repo1`) and push following the standard workflow. Make as many changes and pushes you like.\n\n6.  Go to your GitHub account again and make a repository named `hw_repo2`. **Clone** it inside your `Downloads` folder (you know how to be inside `Downloads`, right?) again (go inside the `hw_repo2` folder correctly after cloning, you know how). Add something (files, folder, whatever) in this folder (`hw_repo2`) again and push following the standard workflow. Make as many changes and pushes you like.\n\n7.  You learned these bash commands today:\n\n-   `pwd`\n-   `ls`\n-   `cat`\n-   `echo`\n-   `mkdir`\n-   `cd`\n-   `rm`\n-   `touch`\\\n    Can you relate them with Windows alternatives? I am giving a hint for `touch`. `touch` is the alternative of naming a new file while creating in Windows. Windows is doing it visually to help us (using different tools though, for example, Microsoft Words for `.docx` files. You can't name a file like `file_name.jpeg` using Microsoft Words, though. Right? You need some other tools for that image file naming (`.jpeg`). But bash or terminal has no apparent limit). Think of the other commands now. Can you make a mind map of which command comes before or after which one if you are navigating your folders and creating some empty CSV files and inserting content in those files? For example, **a shuffled list of the alphabets** becomes **A → B → C → D → E → ..... → Z** if we organize them, right? Or a map of **Father, Son, Grandson, Me, My_Siblings, Grandma** will be **Grandma → Father → Son → Me + My_Siblings → Grandson** if we think of generations, right? Try to make one for those commands and add it in a file inside one of your `hw_repo*`. `echo` it in a file, make a .doc, .ppt, .png/jpeg/jpg or .txt file or whatever. I don't mind, I just want to see that you got the idea. GitHub also doesn't care what you are pushing to it (it is just a storage with special functionality to track files -- well, some more though, we will know later). Let's see. If you need help, don't hesitate to reach out! There is no shame in asking for help while learning.\n\n8.  Optional: Navigate your other folders as well. Catch the logic of navigation. Also, can you make a list of words I used alternatively (back and forth) and maybe add them in one of your homework repo again? For example, folder, repo, and directory are basically the same thing; similarly, `HOME`, `root` and `~` are the same.\n\n9.  Share your repos with me (**email me by Friday 10PM BD Time**). I need time to check, right? Please, help me here....\n\n# Final Thought\n\nYou might not know how powerful you are getting! But trust me, you are too strong.......\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}