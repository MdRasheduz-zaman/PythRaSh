{
  "hash": "e11a2fc9399b85f41dd989ee1c48948f",
  "result": {
    "markdown": "---\ntitle: \"Basic R\"\nabstract: \"Data types, variables, vectors, data frame, functions\"\n---\n\n  \n<style>\n  .content {\n    text-align: justify !important;\n  }\n  p {\n    text-align: justify !important;\n  }\n  .quarto-body {\n    text-align: justify !important;\n  }\n</style>\n  \n\n\n\n# L2: Data Representation  \n  \n## Using R as a Calculator  \nLet's do some basic calculation.  \n\n::: {.cell}\n\n```{.r .cell-code}\n5+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n3+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n3-2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n3*2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n3/2 #normal division\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.5\n```\n:::\n\n```{.r .cell-code}\n7 %/% 2 #integer division, only the quotient\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n5 %% 3 #modulus division, the remainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n(10-5)*(2+4) #use of parentheses\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n10-5*2+4 #Noticed BODMAS?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n(10-5)*(2+4) #Noticed BODMAS\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n7/(1+3); 7/1+3 #multi-line codes, separated with semi-colon\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.75\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n1+2; log(1); 1/10 #more multi-line codes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0.1\n```\n:::\n:::\n\n\n## Variables  \nVariables are variable. We have freedom to name them as we wish. But make any variable name meaningful and identifiable.  \n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5 #assign value 5 to a \nb = 10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\na <- a + 10\nb = b + 15\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 15\n```\n:::\n\n```{.r .cell-code}\na^2 #a squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 225\n```\n:::\n\n```{.r .cell-code}\na**2 #a squared again, in a different way.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 225\n```\n:::\n\n```{.r .cell-code}\na^3 #a qubed\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3375\n```\n:::\n:::\n\n\n::: callout-note\n`<-` and `=` are used to assign values. It is not mathematical equality. `b <- b + 15` might make better sense than `b = b + 15`.\n:::\n\n### Integer and Modulus division again  \nDo some more practice.  \n\n::: {.cell}\n\n```{.r .cell-code}\n7/3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2.333333\n```\n:::\n\n```{.r .cell-code}\n7%/%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n7%%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n:::\n\n\n## Rounding  \nSome important functions we apply on numerical values  \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 9/4\nfloor(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nceiling(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nround(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nround(x, 2) #round till 2 decimal points\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2.25\n```\n:::\n:::\n\n\n## Logical Operations  \nGet to know TRUE/FALSE in R.  \n\n::: {.cell}\n\n```{.r .cell-code}\na = 5\nb = 7\nc = 10\nd = 3\na == b #is a equal to b? Ans: No/FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na != b #is a not equal to b? Ans: Yes/TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na > b #is a greater than b? Ans: FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na < b #is a less than b? Ans: TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na >= b #is a greater than or equal to b? Ans: FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na <= b #is a less than or equal to b? Ans: TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na < b | d > b #is a less than b OR d greater than b?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#It's answer will be TRUE OR FALSE --> So, TRUE\na < b & c > d #is a less than b AND a greater than b? It's answer will be TRUE AND TRUE --> So, TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na < b & d > c #is a less than b AND a greater than b? It's answer will be TRUE AND FALSE --> So, FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n:::\n\n\n## Help and Documentation  \nBut how to know more about a function? The package/library developer have written helpful documentation for us.  \n\n::: {.cell}\n\n```{.r .cell-code}\n?log\nexample(log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n\nlog> log(exp(3))\n[1] 3\n\nlog> log10(1e7) # = 7\n[1] 7\n\nlog> x <- 10^-(1+2*1:9)\n\nlog> cbind(deparse.level=2, # to get nice column names\nlog+       x, log(1+x), log1p(x), exp(x)-1, expm1(x))\n          x   log(1 + x)     log1p(x)   exp(x) - 1     expm1(x)\n [1,] 1e-03 9.995003e-04 9.995003e-04 1.000500e-03 1.000500e-03\n [2,] 1e-05 9.999950e-06 9.999950e-06 1.000005e-05 1.000005e-05\n [3,] 1e-07 1.000000e-07 1.000000e-07 1.000000e-07 1.000000e-07\n [4,] 1e-09 1.000000e-09 1.000000e-09 1.000000e-09 1.000000e-09\n [5,] 1e-11 1.000000e-11 1.000000e-11 1.000000e-11 1.000000e-11\n [6,] 1e-13 9.992007e-14 1.000000e-13 9.992007e-14 1.000000e-13\n [7,] 1e-15 1.110223e-15 1.000000e-15 1.110223e-15 1.000000e-15\n [8,] 1e-17 0.000000e+00 1.000000e-17 0.000000e+00 1.000000e-17\n [9,] 1e-19 0.000000e+00 1.000000e-19 0.000000e+00 1.000000e-19\n```\n:::\n\n```{.r .cell-code}\n?log()\n```\n:::\n\n\n## Working with Vectors  \nWhat is a vector? See the example and think.  \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 4, 5) #c means concatenate\nz <- 1:5 #consecutively, from 1 through 5. A short-hand notation using :\ny <- c(3, 6, 9, 12, 15, 20)\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmode(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\nx[1] #first entry in vector y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nx[2:5] #2nd to 5th entries in vector y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nDNA <- c(\"A\", \"T\", \"G\", \"C\") #character vector. Notice the quotation marks.\ndec <- c(10.0, 20.5, 30, 60, 80.9, 90, 100.7, 50, 40, 45, 48, 56, 55) #vector of floats. All numbers became floats, it's called coercion\ndec[c(1:3, 7:length(dec))] #1st to 3rd and then 7th till the end of vector `dec`. Output as a vector.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]  10.0  20.5  30.0 100.7  50.0  40.0  45.0  48.0  56.0  55.0\n```\n:::\n:::\n\n\n### Vector Operations  \nNotice the element-wise or index-wise mathematical operations (`+`, `/`, `log2()`, `round()`, etc.). Noticed?  \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- 2:11\n#x and y are of same length\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]  3  5  7  9 11 13 15 17 19 21\n```\n:::\n\n```{.r .cell-code}\ny / x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 2.000000 1.500000 1.333333 1.250000 1.200000 1.166667 1.142857 1.125000\n [9] 1.111111 1.100000\n```\n:::\n\n```{.r .cell-code}\nlog2(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000000 1.000000 1.584963 2.000000 2.321928 2.584963 2.807355 3.000000\n [9] 3.169925 3.321928\n```\n:::\n\n```{.r .cell-code}\nround(log2(x), 1) #log2 of all the values of `x`, 1 digit after decimal to round.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.0 1.0 1.6 2.0 2.3 2.6 2.8 3.0 3.2 3.3\n```\n:::\n\n```{.r .cell-code}\nround(log2(x), 3) #same logic\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000 1.000 1.585 2.000 2.322 2.585 2.807 3.000 3.170 3.322\n```\n:::\n:::\n\n  \n::: callout-note\nNested functions work inside out. Think again about `round(log2(x), 1)` and you will see it. At first, it is making `log2` of vector `x` and then it is rounding the log2 values to one digit after decimal. Got it?\n:::\n  \n\n## Data Frame  \nNow, it's time to use vectors to make data sets.....   \n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"Mina\", \"Raju\", \"Mithu\", \"Lali\")\ngender <- c(\"Female\", \"Male\", \"Female\", \"Female\")\nage <- c(15, 12, 2, 3)\nis_human <- c(TRUE, TRUE, FALSE, FALSE)\ncartoon <- data.frame(names, gender, age, is_human)\nwrite.table(cartoon, \"cartoon.csv\", sep = \",\", col.names = TRUE)\ndf <- read.table(\"cartoon.csv\", header = TRUE, sep = \",\")\ndim(df) #`dim` means dimension. so, rows * columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4 4\n```\n:::\n\n```{.r .cell-code}\nstr(df) #structure of `df`\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n'data.frame':\t4 obs. of  4 variables:\n $ names   : chr  \"Mina\" \"Raju\" \"Mithu\" \"Lali\"\n $ gender  : chr  \"Female\" \"Male\" \"Female\" \"Female\"\n $ age     : int  15 12 2 3\n $ is_human: logi  TRUE TRUE FALSE FALSE\n```\n:::\n:::\n\n\nWe made the vectors first, and the used them to make the `cartton` data frame or table. We learned how to export the data frame using write.table function. Also, we learned to import or read back the table using `read.table` function. What are the `sep`, `col.names`, `header` arguments there? Why do we need them? Think. Try thinking of different properties of a data set.\n\n### Gene Expression Table  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_expr <- data.frame(\n  genes = c(\"TP53\", \"BRCA1\", \"MYC\", \"EGFR\", \"GAPDH\", \"CDC2\"),\n  sample1 = c(8.2, 6.1, 9.5, 7.0, 10.0, 12),\n  Sample2 = c(5.9, 3.9, 7.2, 4.8, 7.9, 9),\n  Sample3 = c(8.25, 6.15, 9.6, 7.1, 10.1, 11.9),\n  pathways = c(\"Apoptosis\", \"DNA Repair\", \"Cell Cycle\", \"Signaling\", \"Housekeeping\", \"Cell Division\")\n)\nwrite.table(gene_expr, \"gene_expr.csv\", sep = \",\", col.names = TRUE)\ngene_set <- read.table(\"gene_expr.csv\", header = TRUE, sep = \",\")\n```\n:::\n\n  \n::: callout-note\nHere, we directly used the vectors as different columns while making the data frame. Did you notice that? Also, the syntax is different here. We can't assign the vectors with the assignment operator (means we can't use `<-` sign. We have to use the `=` sign). Try using the `<-` sign. Did you notice the column names?\n:::\n\n## Homeworks  \n\n1.  Compute the difference between this year (2025) and the year you started at the university and divide this by the difference between this year and the year you were born. Multiply this with 100 to get the percentage of your life you have spent at the university.\\\n2.  Make different kinds of variables and vectors with the data types we learned together.\\\n3.  What are the properties of a data frame?\\\n    Hint: Open an excel/csv/txt file you have and try to \"generalize\".\\\n4.  Can you make logical questions on the 2 small data sets we used? Try. It will help you understanding the logical operations we tried on variables. Now we are going to apply them on vectors (columns) on the data sets. For example, in the `cartoon` data set, we can ask/try to subset the data set filtering for females only, or for both females and age greater than 2 years.\\\n5.  If you are writing or practicing coding in R, write comment for each line on what it is doing. It will help to chunk it better into your brain.\\\n6.  Push the script and/or your answers to the questions (with your solutions) to one of your GitHub repo (and send me the repo link).\n\n### Deadline\n\n**Friday, 10pm BD Time.**\n\n\n# L3: Data Transformation  \n  \nFirstly, how did you solve the problems?  \n<br>\nGive me your personal Mindmap. Please, send it in the chat!  \n\n## Getting Started  \n\n### Installation of R Markdown\n\nWe will use `rmarkdown` to have the flexibility of writing codes like the one you are reading now. If you haven't installed the `rmarkdown` package yet, you can do so with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install rmarkdown package\n#install.packages(\"rmarkdown\")\nlibrary(rmarkdown)\n# Other useful packages we might use\n#install.packages(\"dplyr\")    # Data manipulation\nlibrary(dplyr)\n#install.packages(\"readr\")    # Reading CSV files\nlibrary(readr)\n```\n:::\n\n  \nRemove the hash sign before the `install.packages(\"rmarkdown\")`, `install.packages(\"dplyr\") `, `install.packages(\"readr\")` if the library loading fails. That means the package is not there to be loaded. We need to download/install first.  \n\n:::callout-note  \n[Do you remember this book by Hadley Wickham?](https://r4ds.had.co.nz). Try to follow it to get the hold on the basic R syntax and lexicon   \n:::\n  \n### Basic Setup for Today's Session  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Clear environment\nrm(list = ls())\n\n# Check working directory\ngetwd()\n\n# Set working directory if needed\n# setwd(\"path/to/your/directory\")  # Uncomment and modify as needed\n```\n:::\n\n  \n### Building on Last HW:  \n\n::: {.cell}\n\n```{.r .cell-code}\ncartoon <- data.frame(\n  names = c(\"Mina\", \"Raju\", \"Mithu\", \"Lali\"),\n  gender = c(\"Female\", \"Male\", \"Female\", \"Female\"),\n  age = c(15, 12, 2, 3),\n  is_human = c(TRUE, TRUE, FALSE, FALSE)\n)\ncartoon\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  names gender age is_human\n1  Mina Female  15     TRUE\n2  Raju   Male  12     TRUE\n3 Mithu Female   2    FALSE\n4  Lali Female   3    FALSE\n```\n:::\n\n```{.r .cell-code}\ndim(cartoon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4 4\n```\n:::\n\n```{.r .cell-code}\nstr(cartoon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n'data.frame':\t4 obs. of  4 variables:\n $ names   : chr  \"Mina\" \"Raju\" \"Mithu\" \"Lali\"\n $ gender  : chr  \"Female\" \"Male\" \"Female\" \"Female\"\n $ age     : num  15 12 2 3\n $ is_human: logi  TRUE TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nlength(cartoon$names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n##subseting\ncartoon[1:2, 2:3] #row 1-2, column 2-3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gender age\n1 Female  15\n2   Male  12\n```\n:::\n\n```{.r .cell-code}\ncartoon[c(1, 3), c(1:3)] #row 1-3, column 1-3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  names gender age\n1  Mina Female  15\n3 Mithu Female   2\n```\n:::\n\n```{.r .cell-code}\n#condition for selecting only male characters\nmale_df <- cartoon[cartoon$gender == \"Male\", ]\nmale_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  names gender age is_human\n2  Raju   Male  12     TRUE\n```\n:::\n\n```{.r .cell-code}\n#condition for selecting female characters with age more than 2 years\nfemale_age <- cartoon[cartoon$gender == \"Female\" & cartoon$age > 2, ]\nfemale_age\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  names gender age is_human\n1  Mina Female  15     TRUE\n4  Lali Female   3    FALSE\n```\n:::\n\n```{.r .cell-code}\nsum(female_age$age) #sum of age of female_age dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 18\n```\n:::\n\n```{.r .cell-code}\nsd(cartoon$age) #standard deviation of age of main cartoon dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 6.480741\n```\n:::\n\n```{.r .cell-code}\nmean(cartoon$age) #mean of age of main cartoon dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 8\n```\n:::\n:::\n\n  \n[Check your colleague's repo for the Q3](https://github.com/atiyashehreen/hw_repo3/blob/main/propertiesofdataframe.txt).  \n\n  \n**Logical Operators**\n\n| Operator | Meaning          | Example       |\n|----------|------------------|---------------|\n| `==`     | Equal to         | `x == 5`      |\n| `!=`     | Not equal        | `x != 5`      |\n| `<`      | Less than        | `x < 5`       |\n| `>`      | Greater than     | `x > 5`       |\n| `<=`     | Less or equal    | `x <= 5`      |\n| `>=`     | Greater or equal | `x >= 5`      |\n| `!`      | Not              | `!(x < 5)`    |\n| `|`      | OR               | `x < 5 | x > 10` |\n| `&`      | AND              | `x > 5 & x < 10` |\n\n### Preamble on random variables (RV):  \nRV is so fundamental of an idea to interpret and do better in any kind of data analyses. But what is it? Let's imagine this scenario first. You got 30 mice to do an experiment to check anti-diabetic effect of a plant extract. You randomly assigned them into 3 groups. `control`, `treat1` (meaning insulin receivers), and `treat2` (meaning your plant extract receivers). Then you kept testing and measuring. You have mean glucose level of every mouse and show whether the mean value of `treat1` is equal to `treat2` or not. So, are you done? Not really. Be fastidious about the mice. What if you got some other 30 mice? Are they the same? Will their mean glucose level be the same? No, right. We would end up with different mean value. We call this type of quantities RV. Mean, Standard deviation, median, variance, etc. all are RVs. Do you see the logic? That's why we put this constraint and look for p-value, confidence interval (or CI), etc. by (null) hypothesis testing and sample distribution analyses. We will get into these stuffs later. But let's check what I meant. Also ponder about `sample` vs `population`.  \n\n\nLet's download the data first.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download small example dataset\ndownload.file(\"https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv\",\n              destfile = \"mice.csv\")\n\n# Load data\nmice <- read.csv(\"mice.csv\")\n```\n:::\n\n  \nLet's check now.  \n\n::: {.cell}\n\n```{.r .cell-code}\ncontrol <- sample(mice$Bodyweight,12)\nmean(control)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 23.0125\n```\n:::\n\n```{.r .cell-code}\ncontrol1 <- sample(mice$Bodyweight,12)\nmean(control1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 25.3375\n```\n:::\n\n```{.r .cell-code}\ncontrol2 <- sample(mice$Bodyweight,12)\nmean(control2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 26.93667\n```\n:::\n:::\n\n  \nDo you see the difference in the mean value now?  \n  \n### Basic Stuffs: Atomic Vector  \n\n::: {.cell}\n\n```{.r .cell-code}\natomic_vec <- c(Human=0.5, Mouse=0.33)\n```\n:::\n\nIt is fast, but has limited access methods.  \n\nHow to access elements here?  \n\n::: {.cell}\n\n```{.r .cell-code}\natomic_vec[\"Human\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nHuman \n  0.5 \n```\n:::\n\n```{.r .cell-code}\natomic_vec[\"Mouse\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nMouse \n 0.33 \n```\n:::\n:::\n\n  \n### Basic Stuffs: Matrices  \n  \nMatrices are essential for biologists working with expression data, distance matrices, and other numerical data. ONLY NUMERICAL DATA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a gene expression matrix: rows=genes, columns=samples\nexpr_matrix <- matrix(\n  c(12.3, 8.7, 15.2, 6.8,\n    9.5, 11.2, 13.7, 7.4,\n    5.6, 6.8, 7.9, 6.5),\n  nrow = 3, ncol = 4, byrow = TRUE\n)\n\n# Add dimension names\nrownames(expr_matrix) <- c(\"BRCA1\", \"TP53\", \"GAPDH\")\ncolnames(expr_matrix) <- c(\"Control_1\", \"Control_2\", \"Treatment_1\", \"Treatment_2\")\nexpr_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n      Control_1 Control_2 Treatment_1 Treatment_2\nBRCA1      12.3       8.7        15.2         6.8\nTP53        9.5      11.2        13.7         7.4\nGAPDH       5.6       6.8         7.9         6.5\n```\n:::\n\n```{.r .cell-code}\n# Matrix dimensions\ndim(expr_matrix)       # Returns rows and columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3 4\n```\n:::\n\n```{.r .cell-code}\nnrow(expr_matrix)      # Number of rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nncol(expr_matrix)      # Number of columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# Matrix subsetting\nexpr_matrix[2, ]       # One gene, all samples\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  Control_1   Control_2 Treatment_1 Treatment_2 \n        9.5        11.2        13.7         7.4 \n```\n:::\n\n```{.r .cell-code}\nexpr_matrix[, 3:4]     # All genes, treatment samples only\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n      Treatment_1 Treatment_2\nBRCA1        15.2         6.8\nTP53         13.7         7.4\nGAPDH         7.9         6.5\n```\n:::\n\n```{.r .cell-code}\nexpr_matrix[\"TP53\", c(\"Control_1\", \"Treatment_1\")]  # Specific gene and samples\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  Control_1 Treatment_1 \n        9.5        13.7 \n```\n:::\n\n```{.r .cell-code}\n# Matrix calculations (useful for bioinformatics)\n# Mean expression per gene\ngene_means <- rowMeans(expr_matrix)\ngene_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nBRCA1  TP53 GAPDH \n10.75 10.45  6.70 \n```\n:::\n\n```{.r .cell-code}\n# Mean expression per sample\nsample_means <- colMeans(expr_matrix)\nsample_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  Control_1   Control_2 Treatment_1 Treatment_2 \n   9.133333    8.900000   12.266667    6.900000 \n```\n:::\n\n```{.r .cell-code}\n# Calculate fold change (Treatment vs Control)\ncontrol_means <- rowMeans(expr_matrix[, 1:2])\ntreatment_means <- rowMeans(expr_matrix[, 3:4])\nfold_change <- treatment_means / control_means\nfold_change\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n   BRCA1     TP53    GAPDH \n1.047619 1.019324 1.161290 \n```\n:::\n\n```{.r .cell-code}\n# Matrix visualization\n# Heatmap of expression data\nheatmap(expr_matrix, \n        Colv = NA,         # Don't cluster columns\n        scale = \"row\",     # Scale by row (gene)\n        col = heat.colors(16),\n        main = \"Gene Expression Heatmap\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/matrices-1.png){width=1650}\n:::\n:::\n\n  \n### Basic Stuffs: List  \nLists are the most flexible data structure in R - they can hold any combination of data types, including other lists! This makes them essential for biological data analysis where we often deal with mixed data types.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A list storing different types of genomic data\ngenomics_data <- list(\n  gene_names = c(\"TP53\", \"BRCA1\", \"MYC\"),               # Character vector\n  expression = matrix(c(1.2, 3.4, 5.6, 7.8, 9.1, 2.3), nrow=3),    # Numeric matrix\n  is_cancer_gene = c(TRUE, TRUE, FALSE),                 # Logical vector\n  metadata = list(                                       # Nested list!\n    lab = \"CRG\",\n    date = \"2023-05-01\"\n  )\n)\n```\n:::\n\n  \nHow to Access Elements of a List?  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1: Double brackets [[ ]] for single element\ngenomics_data[[1]]  # Returns gene_names vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"TP53\"  \"BRCA1\" \"MYC\"  \n```\n:::\n\n```{.r .cell-code}\n# Method 2: $ operator with names (when elements are named)\ngenomics_data$expression  # Returns the matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n     [,1] [,2]\n[1,]  1.2  7.8\n[2,]  3.4  9.1\n[3,]  5.6  2.3\n```\n:::\n\n```{.r .cell-code}\n# Method 3: Single bracket [ ] returns a sublist\ngenomics_data[1:2]  # Returns list with first two elements\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n$gene_names\n[1] \"TP53\"  \"BRCA1\" \"MYC\"  \n\n$expression\n     [,1] [,2]\n[1,]  1.2  7.8\n[2,]  3.4  9.1\n[3,]  5.6  2.3\n```\n:::\n:::\n\n\nKey Difference from Vectors:  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare to your prop.table() example:\natomic_vec[\"Human\"]    # Returns named numeric (vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nHuman \n  0.5 \n```\n:::\n\n```{.r .cell-code}\natomic_vec[\"Mouse\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nMouse \n 0.33 \n```\n:::\n\n```{.r .cell-code}\ngenomics_data[1] # Returns list containing the vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n$gene_names\n[1] \"TP53\"  \"BRCA1\" \"MYC\"  \n```\n:::\n:::\n\nWhy Biologists Need Lists?  \n`lm()`, `prcomp()` functions, RNAseq analysis packages produces list. So, we need to learn how to handle lists.  \n\nSee these examples:  \n  \nA. Storing BLAST results  \n\n::: {.cell}\n\n```{.r .cell-code}\nblast_hits <- list(\n  query_id = \"GeneX\",\n  hit_ids = c(\"NP_123\", \"NP_456\"),\n  e_values = c(1e-50, 3e-12),\n  alignment = matrix(c(\"ATG...\", \"CTA...\"), ncol=1))\n```\n:::\n\n  \nB. Handling Mixed Data  \n\n::: {.cell}\n\n```{.r .cell-code}\npatient_data <- list(\n  id = \"P1001\",\n  tests = data.frame(\n    test = c(\"WBC\", \"RBC\"),\n    value = c(4.5, 5.1)\n  ),\n  has_mutation = TRUE\n)\n```\n:::\n\n  \n\nCommon List Operations  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Add new element\ngenomics_data$sequencer <- \"Illumina\"\n\n# Remove element\ngenomics_data$is_cancer_gene <- NULL\n\n# Check structure (critical for complex lists)\nstr(genomics_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nList of 4\n $ gene_names: chr [1:3] \"TP53\" \"BRCA1\" \"MYC\"\n $ expression: num [1:3, 1:2] 1.2 3.4 5.6 7.8 9.1 2.3\n $ metadata  :List of 2\n  ..$ lab : chr \"CRG\"\n  ..$ date: chr \"2023-05-01\"\n $ sequencer : chr \"Illumina\"\n```\n:::\n:::\n\n  \nBy the way, how would you add more patients?  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Add new patient\npatient_data$P1002 <- list(\n  id = \"P1002\",\n  tests = data.frame(\n    test = c(\"WBC\", \"RBC\", \"Platelets\"),\n    value = c(6.2, 4.8, 150)\n  ),\n  has_mutation = FALSE\n)\n# Access specific patient\npatient_data$P1001$tests\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nNULL\n```\n:::\n:::\n\nFor Batch Processing:  \n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- list(\n  list(\n    id = \"P1001\",\n    tests = data.frame(test = c(\"WBC\", \"RBC\"), value = c(4.5, 5.1)),\n    has_mutation = TRUE\n  ),\n  list(\n    id = \"P1002\",\n    tests = data.frame(test = c(\"WBC\", \"RBC\", \"Platelets\"), value = c(6.2, 4.8, 150)),\n    has_mutation = FALSE\n  )\n)\n\n# Access 2nd patient's WBC value\npatients[[2]]$tests$value[patients[[2]]$tests$test == \"WBC\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 6.2\n```\n:::\n:::\n\n\nConverting Between Structures  \n\n::: {.cell}\n\n```{.r .cell-code}\n# List → Vector\nunlist(genomics_data[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_names1   gene_names2   gene_names3   expression1   expression2 \n       \"TP53\"       \"BRCA1\"         \"MYC\"         \"1.2\"         \"3.4\" \n  expression3   expression4   expression5   expression6  metadata.lab \n        \"5.6\"         \"7.8\"         \"9.1\"         \"2.3\"         \"CRG\" \nmetadata.date \n \"2023-05-01\" \n```\n:::\n:::\n\n  \nVisualization  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R plot from list data\nbarplot(unlist(genomics_data[2]),\n        names.arg = genomics_data[[1]])\n```\n:::\n\n  \nThis code won't work if you run. `unlist(genomics_data[2]` creates a vector of length 6 from our 3*2 matrix but `genomics_data[[1]]` has 3 things inside the `gene_names` vector. Debug like this:  \n\n::: {.cell}\n\n```{.r .cell-code}\ndim(genomics_data$expression)  # e.g., 2 rows x 2 cols\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3 2\n```\n:::\n\n```{.r .cell-code}\nlength(genomics_data$gene_names) # e.g., 3 genes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n:::\n\n  \nA. Gene-Centric (Mean Expression)  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(rowMeans(genomics_data$expression),\n        names.arg = genomics_data$gene_names,\n        col = \"steelblue\",\n        ylab = \"Mean Expression\",\n        main = \"Average Gene Expression\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/unnamed-chunk-19-1.png){width=1650}\n:::\n:::\n\n  \nB. Sample-Centric (All Measurements) \n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(genomics_data$expression,\n        beside = TRUE,\n        names.arg = paste0(\"Sample_\", 1:ncol(genomics_data$expression)),\n        legend.text = genomics_data$gene_names,\n        args.legend = list(x = \"topright\", bty = \"n\"),\n        col = c(\"blue\", \"red\", \"green\"),\n        main = \"Expression Across Samples\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/unnamed-chunk-20-1.png){width=1650}\n:::\n:::\n\n  \n:::callout-note\nThis matches real-world scenarios:\n\nRNA-seq: Rows=genes, cols=samples\n\nrowMeans() = average expression per gene\n\nbeside=TRUE => compare samples within genes\n\nProteomics: Rows=proteins, cols=replicates\n\nSame principles apply  \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate stats\ngene_means <- rowMeans(genomics_data$expression)\ngene_sds <- apply(genomics_data$expression, 1, sd)\n\n# Plot with error bars\nbp <- barplot(gene_means, ylim = c(0, max(gene_means + gene_sds)))\narrows(bp, gene_means - gene_sds, bp, gene_means + gene_sds, \n       angle = 90, code = 3)\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/unnamed-chunk-21-1.png){width=1650}\n:::\n:::\n\n\n**Task: Create a list containing:**  \n\ni) A character vector of 3 gene names\n\nii) A numeric matrix of expression values\n\niii) A logical vector indicating pathway membership\n\niv) A nested list with lab metadata\n  \n  \n## Factor Variables  \nImportant for categorical data  \n  \n### Creating Factors  \n\nFactors are used to represent categorical data in R. They are particularly important for biological data like genotypes, phenotypes, and experimental conditions.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple factor: DNA sample origins\norigins <- c(\"Human\", \"Mouse\", \"Human\", \"Zebrafish\", \"Mouse\", \"Human\")\norigins_factor <- factor(origins)\norigins_factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] Human     Mouse     Human     Zebrafish Mouse     Human    \nLevels: Human Mouse Zebrafish\n```\n:::\n\n```{.r .cell-code}\n# Check levels (categories)\nlevels(origins_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Human\"     \"Mouse\"     \"Zebrafish\"\n```\n:::\n\n```{.r .cell-code}\n# Create a factor with predefined levels\ntreatment_groups <- factor(c(\"Control\", \"Low_dose\", \"High_dose\", \"Control\", \"Low_dose\"),\n                         levels = c(\"Control\", \"Low_dose\", \"High_dose\"))\ntreatment_groups\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] Control   Low_dose  High_dose Control   Low_dose \nLevels: Control Low_dose High_dose\n```\n:::\n\n```{.r .cell-code}\n# Ordered factors (important for severity, stages, etc.)\ndisease_severity <- factor(c(\"Mild\", \"Severe\", \"Moderate\", \"Mild\", \"Critical\"),\n                         levels = c(\"Mild\", \"Moderate\", \"Severe\", \"Critical\"),\n                         ordered = TRUE)\ndisease_severity\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] Mild     Severe   Moderate Mild     Critical\nLevels: Mild < Moderate < Severe < Critical\n```\n:::\n\n```{.r .cell-code}\n# Compare with ordered factors\ndisease_severity[1] < disease_severity[2]  # Is Mild less severe than Severe?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n:::\n\n\n### Factor Operations  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count frequencies\ntable(origins_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\norigins_factor\n    Human     Mouse Zebrafish \n        3         2         1 \n```\n:::\n\n```{.r .cell-code}\n# Calculate proportions\nprop.table(table(origins_factor))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\norigins_factor\n    Human     Mouse Zebrafish \n0.5000000 0.3333333 0.1666667 \n```\n:::\n\n```{.r .cell-code}\n# Change reference level (important for statistical models)\norigins_factor_relevel <- relevel(origins_factor, ref = \"Mouse\")\norigins_factor_relevel\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] Human     Mouse     Human     Zebrafish Mouse     Human    \nLevels: Mouse Human Zebrafish\n```\n:::\n\n```{.r .cell-code}\n# Convert to character\nas.character(origins_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Human\"     \"Mouse\"     \"Human\"     \"Zebrafish\" \"Mouse\"     \"Human\"    \n```\n:::\n\n```{.r .cell-code}\n# Plot factors - Basic barplot\nbarplot(table(origins_factor), \n        col = c(\"blue\", \"green\", \"red\"),\n        main = \"Sample Origins\",\n        ylab = \"Count\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/factor-operations-1.png){width=1650}\n:::\n:::\n\n  \nMore advanced plot with factors:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_expr <- c(5.2, 7.8, 4.5, 12.3, 8.1, 3.7)\nnames(gene_expr) <- as.character(origins)\n\n# Boxplot by factor\nboxplot(gene_expr ~ origins, \n        col = \"lightblue\",\n        main = \"Gene Expression by Sample Origin\", \n        xlab = \"Origin\", \n        ylab = \"Expression Level\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/unnamed-chunk-22-1.png){width=1650}\n:::\n:::\n\n\n:::callout-note\nKeep noticing the output formats. Sometimes the output is just a number, sometimes a vector or table or list, etc. Check `prop.table(table(origins_factor))`. How is it?\n:::\n  \n::: {.callout-note collapse=\"true\"}\n## Got it?\n`prop <- prop.table(table(origins_factor))` -- is a named numeric vector (atomic vector). `prop$Human` or similar won't work. Check this way:  \n`prop`  \n`prop[\"Human\"]; prop[\"Mouse\"]; prop[\"Zebrafish\"]`  \n\nOr make it a data frame (df) first, then try to use normal way of handling df.\n:::\n  \nAccessing the Output:  \n\n::: {.cell}\n\n```{.r .cell-code}\nprop <- prop.table(table(origins_factor))\nprop #What do you see? A data frame? No difference?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\norigins_factor\n    Human     Mouse Zebrafish \n0.5000000 0.3333333 0.1666667 \n```\n:::\n\n```{.r .cell-code}\nprop[\"Human\"]; prop[\"Mouse\"]; prop[\"Zebrafish\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nHuman \n  0.5 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n    Mouse \n0.3333333 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nZebrafish \n0.1666667 \n```\n:::\n:::\n\n\n## Subsetting Data  \n\n### Vectors  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nexpression_data <- c(3.2, 4.5, 2.1, 6.7, 5.9, 3.3, 7.8, 2.9)\nnames(expression_data) <- paste0(\"Sample_\", 1:8)\nexpression_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_1 Sample_2 Sample_3 Sample_4 Sample_5 Sample_6 Sample_7 Sample_8 \n     3.2      4.5      2.1      6.7      5.9      3.3      7.8      2.9 \n```\n:::\n\n```{.r .cell-code}\n# Subset by position\nexpression_data[3]             # Single element\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_3 \n     2.1 \n```\n:::\n\n```{.r .cell-code}\nexpression_data[c(1, 3, 5)]    # Multiple elements\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_1 Sample_3 Sample_5 \n     3.2      2.1      5.9 \n```\n:::\n\n```{.r .cell-code}\nexpression_data[2:5]           # Range\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_2 Sample_3 Sample_4 Sample_5 \n     4.5      2.1      6.7      5.9 \n```\n:::\n\n```{.r .cell-code}\n# Subset by name\nexpression_data[\"Sample_6\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_6 \n     3.3 \n```\n:::\n\n```{.r .cell-code}\nexpression_data[c(\"Sample_1\", \"Sample_8\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_1 Sample_8 \n     3.2      2.9 \n```\n:::\n\n```{.r .cell-code}\n# Subset by condition\nexpression_data[expression_data > 5]              # Values > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_4 Sample_5 Sample_7 \n     6.7      5.9      7.8 \n```\n:::\n\n```{.r .cell-code}\nexpression_data[expression_data >= 3 & expression_data <= 6]  # Values between 3 and 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nSample_1 Sample_2 Sample_5 Sample_6 \n     3.2      4.5      5.9      3.3 \n```\n:::\n:::\n\n\n### Data Frames\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame\ngene_df <- data.frame(\n  gene_id = c(\"BRCA1\", \"TP53\", \"MYC\", \"EGFR\", \"GAPDH\"),\n  expression = c(8.2, 6.1, 9.5, 7.0, 10.0),\n  mutation = factor(c(\"Yes\", \"No\", \"Yes\", \"No\", \"No\")),\n  pathway = c(\"DNA Repair\", \"Apoptosis\", \"Cell Cycle\", \"Signaling\", \"Metabolism\")\n)\n\ngene_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression mutation    pathway\n1   BRCA1        8.2      Yes DNA Repair\n2    TP53        6.1       No  Apoptosis\n3     MYC        9.5      Yes Cell Cycle\n4    EGFR        7.0       No  Signaling\n5   GAPDH       10.0       No Metabolism\n```\n:::\n\n```{.r .cell-code}\n# Subsetting by row index\ngene_df[1:3, ]         # First three rows, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression mutation    pathway\n1   BRCA1        8.2      Yes DNA Repair\n2    TP53        6.1       No  Apoptosis\n3     MYC        9.5      Yes Cell Cycle\n```\n:::\n\n```{.r .cell-code}\n# Subsetting by column index\ngene_df[, c(1, 2)]     # All rows, first two columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression\n1   BRCA1        8.2\n2    TP53        6.1\n3     MYC        9.5\n4    EGFR        7.0\n5   GAPDH       10.0\n```\n:::\n\n```{.r .cell-code}\n# Subsetting by column name\ngene_df[, c(\"gene_id\", \"mutation\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id mutation\n1   BRCA1      Yes\n2    TP53       No\n3     MYC      Yes\n4    EGFR       No\n5   GAPDH       No\n```\n:::\n\n```{.r .cell-code}\n# Using the $ operator\ngene_df$expression\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  8.2  6.1  9.5  7.0 10.0\n```\n:::\n\n```{.r .cell-code}\ngene_df$mutation\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] Yes No  Yes No  No \nLevels: No Yes\n```\n:::\n\n```{.r .cell-code}\n# Subsetting by condition\ngene_df[gene_df$expression > 8, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression mutation    pathway\n1   BRCA1        8.2      Yes DNA Repair\n3     MYC        9.5      Yes Cell Cycle\n5   GAPDH       10.0       No Metabolism\n```\n:::\n\n```{.r .cell-code}\ngene_df[gene_df$mutation == \"Yes\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression mutation    pathway\n1   BRCA1        8.2      Yes DNA Repair\n3     MYC        9.5      Yes Cell Cycle\n```\n:::\n\n```{.r .cell-code}\n# Multiple conditions\ngene_df[gene_df$expression > 7 & gene_df$mutation == \"No\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  gene_id expression mutation    pathway\n5   GAPDH         10       No Metabolism\n```\n:::\n:::\n\n**Logical Operators**\n\n| Operator | Meaning          | Example       |\n|----------|------------------|---------------|\n| `==`     | Equal to         | `x == 5`      |\n| `!=`     | Not equal        | `x != 5`      |\n| `<`      | Less than        | `x < 5`       |\n| `>`      | Greater than     | `x > 5`       |\n| `<=`     | Less or equal    | `x <= 5`      |\n| `>=`     | Greater or equal | `x >= 5`      |\n| `!`      | Not              | `!(x < 5)`    |\n| `|`      | OR               | `x < 5 | x > 10` |\n| `&`      | AND              | `x > 5 & x < 10` |\n\n### Row Names in Data Frames  \n\nRow names are particularly important in bioinformatics where genes, proteins, or samples are often used as identifiers.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting row names for gene_df\nrownames(gene_df) <- gene_df$gene_id\ngene_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n      gene_id expression mutation    pathway\nBRCA1   BRCA1        8.2      Yes DNA Repair\nTP53     TP53        6.1       No  Apoptosis\nMYC       MYC        9.5      Yes Cell Cycle\nEGFR     EGFR        7.0       No  Signaling\nGAPDH   GAPDH       10.0       No Metabolism\n```\n:::\n:::\n\n<br>\nWe can now drop the gene_id column, if required.  \n\n::: {.cell}\n\n```{.r .cell-code}\ngene_df_clean <- gene_df[, -1]  # Remove the first column\ngene_df_clean\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n      expression mutation    pathway\nBRCA1        8.2      Yes DNA Repair\nTP53         6.1       No  Apoptosis\nMYC          9.5      Yes Cell Cycle\nEGFR         7.0       No  Signaling\nGAPDH       10.0       No Metabolism\n```\n:::\n\n```{.r .cell-code}\n# Access rows by name\ngene_df_clean[\"TP53\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n     expression mutation   pathway\nTP53        6.1       No Apoptosis\n```\n:::\n\n```{.r .cell-code}\n# Check if row names are unique\nany(duplicated(rownames(gene_df_clean)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Handle potential duplicated row names\n# NOTE: R doesn't allow duplicate row names by default\ndup_genes <- data.frame(\n  expression = c(5.2, 6.3, 5.2, 8.1),\n  mutation = c(\"Yes\", \"No\", \"Yes\", \"No\")\n)\n\n# This would cause an error:\n# rownames(dup_genes) <- c(\"BRCA1\", \"BRCA1\", \"TP53\", \"EGFR\")\n\n# Instead, we can preemptively make them unique:\nproposed_names <- c(\"BRCA1\", \"BRCA1\", \"TP53\", \"EGFR\")\nunique_names <- make.unique(proposed_names)\nunique_names  # Show the generated unique names\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"BRCA1\"   \"BRCA1.1\" \"TP53\"    \"EGFR\"   \n```\n:::\n\n```{.r .cell-code}\n# Now we can safely assign them\nrownames(dup_genes) <- unique_names\ndup_genes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n        expression mutation\nBRCA1          5.2      Yes\nBRCA1.1        6.3       No\nTP53           5.2      Yes\nEGFR           8.1       No\n```\n:::\n:::\n\n  \n## Handling Missing/Wrong Values   \n\n### Identifying Issues  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data with missing values\nclinical_data <- data.frame(\n  patient_id = 1:5,\n  age = c(25, 99, 30, -5, 40),    # -5 is wrong, 99 is suspect\n  bp = c(120, NA, 115, 125, 118),  # NA is missing\n  weight = c(65, 70, NA, 68, -1)   # -1 is wrong\n)\nclinical_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  patient_id age  bp weight\n1          1  25 120     65\n2          2  99  NA     70\n3          3  30 115     NA\n4          4  -5 125     68\n5          5  40 118     -1\n```\n:::\n\n```{.r .cell-code}\n# Check for missing values\nis.na(clinical_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n     patient_id   age    bp weight\n[1,]      FALSE FALSE FALSE  FALSE\n[2,]      FALSE FALSE  TRUE  FALSE\n[3,]      FALSE FALSE FALSE   TRUE\n[4,]      FALSE FALSE FALSE  FALSE\n[5,]      FALSE FALSE FALSE  FALSE\n```\n:::\n\n```{.r .cell-code}\ncolSums(is.na(clinical_data))  # Count NAs by column\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\npatient_id        age         bp     weight \n         0          0          1          1 \n```\n:::\n\n```{.r .cell-code}\n# Check for impossible values\nclinical_data$age < 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE FALSE FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nclinical_data$weight < 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE FALSE    NA FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# Find indices of problematic values\nwhich(clinical_data$age < 0 | clinical_data$age > 90)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2 4\n```\n:::\n:::\n\n\n### Fixing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace impossible values with NA\nclinical_data$age[clinical_data$age < 0 | clinical_data$age > 90] <- NA\nclinical_data$weight[clinical_data$weight < 0] <- NA\nclinical_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  patient_id age  bp weight\n1          1  25 120     65\n2          2  NA  NA     70\n3          3  30 115     NA\n4          4  NA 125     68\n5          5  40 118     NA\n```\n:::\n\n```{.r .cell-code}\n# Replace NAs with mean (common in biological data)\nclinical_data$bp[is.na(clinical_data$bp)] <- mean(clinical_data$bp, na.rm = TRUE)\nclinical_data$weight[is.na(clinical_data$weight)] <- mean(clinical_data$weight, na.rm = TRUE)\nclinical_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  patient_id age    bp   weight\n1          1  25 120.0 65.00000\n2          2  NA 119.5 70.00000\n3          3  30 115.0 67.66667\n4          4  NA 125.0 68.00000\n5          5  40 118.0 67.66667\n```\n:::\n\n```{.r .cell-code}\n# Replace NAs with median (better for skewed data)\nclinical_data$age[is.na(clinical_data$age)] <- median(clinical_data$age, na.rm = TRUE)\nclinical_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n  patient_id age    bp   weight\n1          1  25 120.0 65.00000\n2          2  30 119.5 70.00000\n3          3  30 115.0 67.66667\n4          4  30 125.0 68.00000\n5          5  40 118.0 67.66667\n```\n:::\n:::\n\n\n## Data Transformation\n\n### Introduction to Outliers\n\nOutliers can significantly affect statistical analyses, especially in biological data where sample variation can be high.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data with outliers\nexpression_levels <- c(2.3, 2.7, 3.1, 2.9, 2.5, 3.0, 15.2, 2.8)\nboxplot(expression_levels, \n        main = \"Expression Levels with Outlier\",\n        ylab = \"Expression\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/outliers-1.png){width=1650}\n:::\n:::\n\n\n### Identifying Outliers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Statistical approach: Values beyond 1.5*IQR\ndata_summary <- summary(expression_levels)\ndata_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.300   2.650   2.850   4.312   3.025  15.200 \n```\n:::\n\n```{.r .cell-code}\nIQR_value <- IQR(expression_levels)\nupper_bound <- data_summary[\"3rd Qu.\"] + 1.5 * IQR_value\nlower_bound <- data_summary[\"1st Qu.\"] - 1.5 * IQR_value\n\n# Find outliers\noutliers <- expression_levels[expression_levels > upper_bound | \n                             expression_levels < lower_bound]\noutliers\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 15.2\n```\n:::\n:::\n\n\n### Transforming Vectors\n\nMathematical transformations can normalize data, reduce outlier effects, and make data more suitable for statistical analyses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Original data\ngene_exp <- c(15, 42, 87, 115, 320, 560, 1120)\nhist(gene_exp, main = \"Original Expression Values\", xlab = \"Expression\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/transformations-1.png){width=1650}\n:::\n\n```{.r .cell-code}\n# Log transformation (common in gene expression analysis)\nlog_exp <- log2(gene_exp)\nhist(log_exp, main = \"Log2 Transformed Expression\", xlab = \"Log2 Expression\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/transformations-2.png){width=1650}\n:::\n\n```{.r .cell-code}\n# Square root transformation (less aggressive than log)\nsqrt_exp <- sqrt(gene_exp)\nhist(sqrt_exp, main = \"Square Root Transformed Expression\", xlab = \"Sqrt Expression\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/transformations-3.png){width=1650}\n:::\n\n```{.r .cell-code}\n# Z-score normalization (standardization)\nz_exp <- scale(gene_exp)\nhist(z_exp, main = \"Z-score Normalized Expression\", xlab = \"Z-score\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/transformations-4.png){width=1650}\n:::\n\n```{.r .cell-code}\n# Compare transformations\npar(mfrow = c(2, 2))\nhist(gene_exp, main = \"Original\")\nhist(log_exp, main = \"Log2\")\nhist(sqrt_exp, main = \"Square Root\")\nhist(z_exp, main = \"Z-score\")\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/transformations-5.png){width=1650}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))  # Reset plotting layout\n```\n:::\n\n\n### Logical Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create gene expression vector\nexp_data <- c(5.2, 3.8, 7.1, 2.9, 6.5, 8.0, 4.3)\nnames(exp_data) <- paste0(\"Gene_\", 1:7)\n\n# Basic comparisons\nexp_data > 5    # Which genes have expression > 5?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n  TRUE  FALSE   TRUE  FALSE   TRUE   TRUE  FALSE \n```\n:::\n\n```{.r .cell-code}\nexp_data <= 4   # Which genes have expression <= 4?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n FALSE   TRUE  FALSE   TRUE  FALSE  FALSE  FALSE \n```\n:::\n\n```{.r .cell-code}\n# Store results in logical vector\nhigh_exp <- exp_data > 6\nhigh_exp\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n FALSE  FALSE   TRUE  FALSE   TRUE   TRUE  FALSE \n```\n:::\n\n```{.r .cell-code}\n# Use logical vectors for subsetting\nexp_data[high_exp]  # Get high expression values\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_3 Gene_5 Gene_6 \n   7.1    6.5    8.0 \n```\n:::\n:::\n\n\n### Logical Operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combining conditions with AND (&)\nexp_data > 4 & exp_data < 7  # Expression between 4 and 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n  TRUE  FALSE  FALSE  FALSE   TRUE  FALSE   TRUE \n```\n:::\n\n```{.r .cell-code}\n# Combining conditions with OR (|)\nexp_data < 4 | exp_data > 7  # Expression less than 4 OR greater than 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n FALSE   TRUE   TRUE   TRUE  FALSE   TRUE  FALSE \n```\n:::\n\n```{.r .cell-code}\n# Using NOT (!)\n!high_exp  # Not high expression\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_2 Gene_3 Gene_4 Gene_5 Gene_6 Gene_7 \n  TRUE   TRUE  FALSE   TRUE  FALSE  FALSE   TRUE \n```\n:::\n\n```{.r .cell-code}\n# Subsetting with combined conditions\nexp_data[exp_data > 4 & exp_data < 7]  # Get values between 4 and 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_1 Gene_5 Gene_7 \n   5.2    6.5    4.3 \n```\n:::\n:::\n\n\n### Logical Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all() - Are all values TRUE?\nall(exp_data > 0)  # Are all expressions positive?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# any() - Is at least one value TRUE?\nany(exp_data > 7)  # Is any expression greater than 7?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# which() - Get indices of TRUE values\nwhich(exp_data > 6)  # Which elements have expressions > 6?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nGene_3 Gene_5 Gene_6 \n     3      5      6 \n```\n:::\n\n```{.r .cell-code}\n# %in% operator - Test for membership\ntest_genes <- c(\"Gene_1\", \"Gene_5\", \"Gene_9\")\nnames(exp_data) %in% test_genes  # Which names match test_genes?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n### Conditionals\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if-else statement\ngene_value <- 6.8\n\nif(gene_value > 6) {\n  cat(\"High expression\\n\")\n} else if(gene_value > 4) {\n  cat(\"Medium expression\\n\")\n} else {\n  cat(\"Low expression\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\nHigh expression\n```\n:::\n\n```{.r .cell-code}\n# ifelse() for vectors\nexpression_levels <- c(2.5, 5.8, 7.2, 3.1, 6.9)\nexpression_category <- ifelse(expression_levels > 6, \n                             \"High\", \n                             ifelse(expression_levels > 4, \"Medium\", \"Low\"))\nexpression_category\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"Low\"    \"Medium\" \"High\"   \"Low\"    \"High\"  \n```\n:::\n:::\n\n\n## Practical Session  \nCheck out this repo: `https://github.com/genomicsclass/dagdata/`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download small example dataset\ndownload.file(\"https://github.com/genomicsclass/dagdata/raw/master/inst/extdata/msleep_ggplot2.csv\",\n              destfile = \"msleep_data.csv\")\n\n# Load data\nmsleep <- read.csv(\"msleep_data.csv\")\n```\n:::\n\n  \n**In-class Tasks:** \n\n1. Convert 'vore' column to factor and plot its distribution.  \n2. Create a matrix of sleep data columns and add row names.  \n3. Find and handle any missing values.  \n4. Calculate mean sleep time by diet category (vore).  \n5. Identify outliers in sleep_total.  \n  \n\n## Summary of Today's Lesson  \n\nIn today's class, we covered:\n\n1. **Factor Variables**: Essential for categorical data in biology (genotypes, treatments, etc.)\n   - Creation, levels, ordering, and visualization\n\n2. **Subsetting Techniques**: Critical for data extraction and analysis\n   - Vector and data frame subsetting with various methods\n   - Using row names effectively for biological identifiers\n\n3. **Matrix Operations**: Fundamental for expression data\n   - Creation, manipulation, and biological applications\n   - Calculating fold changes and other common operations\n\n4. **Missing Values**: Practical approaches for real-world biological data\n   - Identification and appropriate replacement methods\n\n5. **Data Transformation**: Making data suitable for statistical analysis\n   - Log, square root, and z-score transformations\n   - Outlier identification and handling\n\n6. **Logical Operations**: For data filtering and decision making\n   - Conditions, combinations, and applications\n\n   These skills form the foundation for the more advanced visualization techniques we'll cover in future lessons.  \n\n7. We will know more about conditionals, R packages to handle data and visualization in a better and efficient way.  \n\n8. **List**: Fundamental for many biological data and packages' output.  \n   - Properties, accessing, and applications\n\n## Homework  \n\n1. **Matrix Operations**:  \n   - Create a gene expression matrix with 8 genes and 4 conditions\n   - Calculate the mean expression for each gene\n   - Calculate fold change between condition 4 and condition 1\n   - Create a heatmap of your matrix\n\n2. **Factor Analysis**:  \n   - Using the `iris` dataset, convert Species to an ordered factor\n   - Create boxplots showing Sepal.Length by Species\n   - Calculate mean petal length for each species level\n\n3. **Data Cleaning Challenge**:  \n   - In the downloaded `msleep_data.csv`:\n     * Identify all columns with missing values\n     * Replace missing values appropriately\n     * Create a new categorical variable \"sleep_duration\" with levels \"Short\", \"Medium\", \"Long\"\n\n4. **List challenge**:  \n   - Make your own lists\n   - Replicate all the tasks we did\n   - You may ask AI to give you beginner-level questions but don't ask to solve the questions programmatically. Tell AI not to provide answers. \n\n5. **Complete Documentation**:  \n   - Write all code in R Markdown\n   - Include comments explaining your approach\n   - Push to GitHub\n\n#### Due date: Friday 10pm BD Time  \n\n\n\n",
    "supporting": [
      "firststeps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}