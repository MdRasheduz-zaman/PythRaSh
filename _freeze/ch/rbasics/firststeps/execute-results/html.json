{
  "hash": "d374931918cfbe12d599ec577f47bc73",
  "result": {
    "markdown": "---\ntitle: \"Basic R\"\nabstract: \"Data types, variables, vectors, data frame, functions\"\n---\n\n\n\n  \n## Using R as a Calculator  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n5+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n3+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n3-2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n3*2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n3/2 #normal division\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.5\n```\n:::\n\n```{.r .cell-code}\n7 %/% 2 #integer division, only the quotient\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n5 %% 3 #modulus division, the remainder\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n(10-5)*(2+4) #use of parentheses\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n10-5*2+4 #Noticed BODMAS?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n(10-5)*(2+4) #Noticed BODMAS\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n7/(1+3); 7/1+3 #multi-line codes, separated with semi-colon\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.75\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n1+2; log(1); 1/10 #more multi-line codes\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0.1\n```\n:::\n:::\n\n\n## Variables and Assignments  \n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5 #assign value 5 to a \nb = 10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\na <- a + 10\nb = b + 15\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 15\n```\n:::\n\n```{.r .cell-code}\na^2 #a squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 225\n```\n:::\n\n```{.r .cell-code}\na**2 #a squared again, in a different way.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 225\n```\n:::\n\n```{.r .cell-code}\na^3 #a qubed\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3375\n```\n:::\n:::\n\n  \n::: callout-note\n\n`<-` and `=` are used to assign values. It is not mathematical equality. `b <- b + 15` might make better sense than `b = b + 15`.\n:::\n\n## Integer and Modulus division again  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n7/3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2.333333\n```\n:::\n\n```{.r .cell-code}\n7%/%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n7%%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n:::\n\n\n## Rounding  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 9/4\nfloor(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nceiling(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nround(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nround(x, 2) #round till 2 decimal points\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2.25\n```\n:::\n:::\n\n\n## Logical Operations  \n\n\n::: {.cell}\n\n```{.r .cell-code}\na = 5\nb = 7\nc = 10\nd = 3\na == b #is a equal to b? Ans: No/FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na != b #is a not equal to b? Ans: Yes/TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na > b #is a greater than b? Ans: FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na < b #is a less than b? Ans: TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na >= b #is a greater than or equal to b? Ans: FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na <= b #is a less than or equal to b? Ans: TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na < b | d > b #is a less than b OR d greater than b?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#It's answer will be TRUE OR FALSE --> So, TRUE\na < b & c > d #is a less than b AND a greater than b? It's answer will be TRUE AND TRUE --> So, TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na < b & d > c #is a less than b AND a greater than b? It's answer will be TRUE AND FALSE --> So, FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n:::\n\n\n## Help and Documentation  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n?log\nexample(log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n\nlog> log(exp(3))\n[1] 3\n\nlog> log10(1e7) # = 7\n[1] 7\n\nlog> x <- 10^-(1+2*1:9)\n\nlog> cbind(deparse.level=2, # to get nice column names\nlog+       x, log(1+x), log1p(x), exp(x)-1, expm1(x))\n          x   log(1 + x)     log1p(x)   exp(x) - 1     expm1(x)\n [1,] 1e-03 9.995003e-04 9.995003e-04 1.000500e-03 1.000500e-03\n [2,] 1e-05 9.999950e-06 9.999950e-06 1.000005e-05 1.000005e-05\n [3,] 1e-07 1.000000e-07 1.000000e-07 1.000000e-07 1.000000e-07\n [4,] 1e-09 1.000000e-09 1.000000e-09 1.000000e-09 1.000000e-09\n [5,] 1e-11 1.000000e-11 1.000000e-11 1.000000e-11 1.000000e-11\n [6,] 1e-13 9.992007e-14 1.000000e-13 9.992007e-14 1.000000e-13\n [7,] 1e-15 1.110223e-15 1.000000e-15 1.110223e-15 1.000000e-15\n [8,] 1e-17 0.000000e+00 1.000000e-17 0.000000e+00 1.000000e-17\n [9,] 1e-19 0.000000e+00 1.000000e-19 0.000000e+00 1.000000e-19\n```\n:::\n\n```{.r .cell-code}\n?log()\n```\n:::\n\n\n## Working with Vectors  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 4, 5) #c means concatenate\nz <- 1:5 #consecutively, from 1 through 5. A short-hand\ny <- c(3, 6, 9, 12, 15, 20)\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmode(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\nx[1] #first entry in vector y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nx[2:5] #2nd to 5th entries in vector y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nDNA <- c(\"A\", \"T\", \"G\", \"C\") #character vector. Notice the quotation marks.\ndec <- c(10.0, 20.5, 30, 60, 80.9, 90, 100.7, 50, 40, 45, 48, 56, 55) #vector of floats. All numbers became floats, it's called coercion\ndec[c(1:3, 7:length(dec))] #1st to 3rd and then 7th till the end of vector `dec`. Output as a vector.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]  10.0  20.5  30.0 100.7  50.0  40.0  45.0  48.0  56.0  55.0\n```\n:::\n:::\n\n\n## Vector Operations  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- 2:11\n#x and y are of same length\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]  3  5  7  9 11 13 15 17 19 21\n```\n:::\n\n```{.r .cell-code}\ny / x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 2.000000 1.500000 1.333333 1.250000 1.200000 1.166667 1.142857 1.125000\n [9] 1.111111 1.100000\n```\n:::\n\n```{.r .cell-code}\nlog2(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000000 1.000000 1.584963 2.000000 2.321928 2.584963 2.807355 3.000000\n [9] 3.169925 3.321928\n```\n:::\n\n```{.r .cell-code}\nround(log2(x), 1) #log2 of all the values of `x`, 1 digit after decimal to round.\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.0 1.0 1.6 2.0 2.3 2.6 2.8 3.0 3.2 3.3\n```\n:::\n\n```{.r .cell-code}\nround(log2(x), 3) #same logic\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000 1.000 1.585 2.000 2.322 2.585 2.807 3.000 3.170 3.322\n```\n:::\n:::\n\nNested functions work inside out.  \n\n## Data Frame Example  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- c(\"Mina\", \"Raju\", \"Mithu\", \"Lali\")\ngender <- c(\"Female\", \"Male\", \"Female\", \"Female\")\nage <- c(15, 12, 2, 3)\nis_human <- c(TRUE, TRUE, FALSE, FALSE)\ncartoon <- data.frame(names, gender, age, is_human)\nwrite.table(cartoon, \"cartoon.csv\", sep = \",\", col.names = TRUE)\ndf <- read.table(\"cartoon.csv\", header = TRUE, sep = \",\")\ndim(df) #`dim` means dimension. so, rows * columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4 4\n```\n:::\n\n```{.r .cell-code}\nstr(df) #structure of `df`\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n'data.frame':\t4 obs. of  4 variables:\n $ names   : chr  \"Mina\" \"Raju\" \"Mithu\" \"Lali\"\n $ gender  : chr  \"Female\" \"Male\" \"Female\" \"Female\"\n $ age     : int  15 12 2 3\n $ is_human: logi  TRUE TRUE FALSE FALSE\n```\n:::\n:::\n\n  \nWe made the vectors first, and the used them to make the `cartton` data frame or table. We learned how to export the data frame using write.table function. Also, we learned to import or read back the table using `read.table` function. What are the `sep`, `col.names`, `header` arguments there? Why do we need them? Think. Try thinking of different properties of a data set.  \n\n## Gene Expression Table  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_expr <- data.frame(\n  genes = c(\"TP53\", \"BRCA1\", \"MYC\", \"EGFR\", \"GAPDH\", \"CDC2\"),\n  sample1 = c(8.2, 6.1, 9.5, 7.0, 10.0, 12),\n  Sample2 = c(5.9, 3.9, 7.2, 4.8, 7.9, 9),\n  Sample3 = c(8.25, 6.15, 9.6, 7.1, 10.1, 11.9),\n  pathways = c(\"Apoptosis\", \"DNA Repair\", \"Cell Cycle\", \"Signaling\", \"Housekeeping\", \"Cell Division\")\n)\nwrite.table(gene_expr, \"gene_expr.csv\", sep = \",\", col.names = TRUE)\ngene_set <- read.table(\"gene_expr.csv\", header = TRUE, sep = \",\")\n```\n:::\n\n  \nHere, we directly used the vectors as different columns. Did you notice that? Also, the syntax is different here. We can't asign the vectors with the assignment operator (means we can't use `<-` sign. We have to use the `=` sign).  \n\n## Homeworks  \n\n1. Compute the difference between this year (2025) and the year you started at the university and divide this by the difference between this year and the year you were born. Multiply this with 100 to get the percentage of your life you have spent at the university.  \n2. Make different kinds of variables and vectors with the data types we learned together.  \n3. What are the properties of a data frame?  \nHint: Open an excel/csv/txt file you have and try to \"generalize\".  \n4. Can you make logical questions on the 2 small data sets we used?  Try. It will help you understanding the logical operations we tried on variables. Now we are going to apply them on vectors (columns) on the data sets.  For example, in the `cartoon` data set, we can ask/try to subset the data set filtering for Females only. Or for both females age greater than 2 years.  \n5. Push the script with your solutions to one of your GitHub repo (and send me the repo link).  \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}