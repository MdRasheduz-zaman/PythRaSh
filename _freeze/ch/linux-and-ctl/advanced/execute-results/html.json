{
  "hash": "7fe30f9760e39742528b6e1f5a9bf494",
  "result": {
    "markdown": "---\ntitle: \"Advanced Linux and Command Line Tools\"\nabstract: \"Advanced text processing, scripting, and system administration\"\n---\n\n\n\n\n[Learn a lot from Harvard Chan Bioinformatics Core](https://github.com/hbctraining)\n\n# Prerequisites\n\nBefore diving into this advanced material, you should be comfortable with:\n\n- **Basic Linux commands**: `ls`, `cd`, `pwd`, `mkdir`, `cp`, `mv`, `rm`, `cat`, `head`, `tail`\n- **File permissions**: Understanding `chmod` and `chown`\n- **Text editors**: Basic usage of `nano` or `vim`\n- **File system navigation**: Understanding directory structure and paths\n- **Basic shell concepts**: Environment variables, command history, tab completion\n\nIf you're not familiar with these concepts, please complete the [Linux Basics](basics.qmd) tutorial first.\n\n# Advanced Text Processing Tools\n\n## `grep` - Advanced Pattern Matching\n\n`grep` is one of the most powerful text search tools. Let's explore its advanced features.\n\n### Basic grep Usage\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Search for a pattern in a file\ngrep \"pattern\" file.txt\n\n# Search case-insensitive\ngrep -i \"pattern\" file.txt\n\n# Search in multiple files\ngrep \"pattern\" *.txt\n\n# Search recursively in directories\ngrep -r \"pattern\" directory/\n```\n:::\n\n\n### Advanced grep Options\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Show line numbers\ngrep -n \"pattern\" file.txt\n\n# Show context (2 lines before and after)\ngrep -C 2 \"pattern\" file.txt\n\n# Show only filenames with matches\ngrep -l \"pattern\" *.txt\n\n# Show only lines that DON'T match (invert)\ngrep -v \"pattern\" file.txt\n\n# Use regular expressions\ngrep -E \"^[0-9]+\" file.txt  # Lines starting with numbers\n\n# Count matches\ngrep -c \"pattern\" file.txt\n\n# Show only the matching part\ngrep -o \"pattern\" file.txt\n```\n:::\n\n\n### Regular Expressions with grep\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Lines starting with specific text\ngrep \"^start\" file.txt\n\n# Lines ending with specific text\ngrep \"end$\" file.txt\n\n# Lines containing either pattern1 OR pattern2\ngrep -E \"pattern1|pattern2\" file.txt\n\n# Lines with exactly 3 digits\ngrep -E \"^[0-9]{3}$\" file.txt\n\n# Lines containing word boundaries\ngrep -w \"word\" file.txt\n```\n:::\n\n\n## `awk` - Pattern Scanning and Processing\n\n`awk` is a powerful programming language for text processing. It processes files line by line.\n\n### Basic awk Syntax\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Print entire lines\nawk '{print}' file.txt\n\n# Print specific fields (space-separated by default)\nawk '{print $1}' file.txt  # First field\nawk '{print $2}' file.txt  # Second field\nawk '{print $1, $3}' file.txt  # First and third fields\n\n# Print last field\nawk '{print $NF}' file.txt\n\n# Print number of fields in each line\nawk '{print NF}' file.txt\n```\n:::\n\n\n### Advanced awk Examples\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Print lines with more than 3 fields\nawk 'NF > 3' file.txt\n\n# Print lines where first field equals \"name\"\nawk '$1 == \"name\"' file.txt\n\n# Print lines where second field is greater than 100\nawk '$2 > 100' file.txt\n\n# Add line numbers\nawk '{print NR, $0}' file.txt\n\n# Print specific lines (e.g., lines 5-10)\nawk 'NR >= 5 && NR <= 10' file.txt\n\n# Calculate sum of second column\nawk '{sum += $2} END {print sum}' file.txt\n\n# Print average of second column\nawk '{sum += $2; count++} END {print sum/count}' file.txt\n```\n:::\n\n\n### awk with Field Separators\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Use comma as field separator\nawk -F',' '{print $1, $2}' file.csv\n\n# Use multiple separators\nawk -F'[,;]' '{print $1, $2}' file.txt\n\n# Use tab as separator\nawk -F'\\t' '{print $1, $2}' file.tsv\n```\n:::\n\n\n## `cut` - Extract Columns from Files\n\n`cut` is simpler than `awk` for basic column extraction.\n\n### Basic cut Usage\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Extract first column (space-separated)\ncut -d' ' -f1 file.txt\n\n# Extract first and third columns\ncut -d' ' -f1,3 file.txt\n\n# Extract columns 1-3\ncut -d' ' -f1-3 file.txt\n\n# Use comma as delimiter\ncut -d',' -f1,2 file.csv\n\n# Use tab as delimiter\ncut -d$'\\t' -f1,2 file.tsv\n\n# Extract by character positions\ncut -c1-10 file.txt  # Characters 1-10\ncut -c1,5,10 file.txt  # Characters 1, 5, and 10\n```\n:::\n\n\n## `sed` - Stream Editor\n\n`sed` is used for text substitution and editing.\n\n### Basic sed Usage\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Replace first occurrence of \"old\" with \"new\"\nsed 's/old/new/' file.txt\n\n# Replace all occurrences of \"old\" with \"new\"\nsed 's/old/new/g' file.txt\n\n# Replace only on specific lines (e.g., line 5)\nsed '5s/old/new/' file.txt\n\n# Delete lines containing \"pattern\"\nsed '/pattern/d' file.txt\n\n# Delete empty lines\nsed '/^$/d' file.txt\n\n# Print only lines 5-10\nsed -n '5,10p' file.txt\n```\n:::\n\n\n### Advanced sed Examples\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Replace multiple patterns\nsed -e 's/old1/new1/g' -e 's/old2/new2/g' file.txt\n\n# Use different delimiter (useful for paths)\nsed 's|/old/path|/new/path|g' file.txt\n\n# Case-insensitive replacement\nsed 's/old/new/gi' file.txt\n\n# In-place editing (modify file directly)\nsed -i 's/old/new/g' file.txt\n\n# Backup original file\nsed -i.bak 's/old/new/g' file.txt\n```\n:::\n\n\n## `sort` - Sort Lines\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Sort alphabetically\nsort file.txt\n\n# Sort numerically\nsort -n file.txt\n\n# Sort in reverse order\nsort -r file.txt\n\n# Sort by specific field\nsort -k2 file.txt  # Sort by second field\n\n# Sort by multiple fields\nsort -k1,1 -k2,2n file.txt  # Sort by field 1, then by field 2 numerically\n\n# Remove duplicates while sorting\nsort -u file.txt\n\n# Sort ignoring case\nsort -f file.txt\n```\n:::\n\n\n## `uniq` - Remove Duplicate Lines\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Remove consecutive duplicate lines\nuniq file.txt\n\n# Count occurrences of each line\nuniq -c file.txt\n\n# Show only unique lines\nuniq -u file.txt\n\n# Show only duplicate lines\nuniq -d file.txt\n\n# Ignore case when comparing\nuniq -i file.txt\n```\n:::\n\n\n# Advanced File Operations\n\n## `find` - Find Files and Directories\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Find files by name\nfind . -name \"*.txt\"\n\n# Find files by type\nfind . -type f  # Files only\nfind . -type d  # Directories only\n\n# Find files by size\nfind . -size +100M  # Files larger than 100MB\nfind . -size -1k    # Files smaller than 1KB\n\n# Find files by modification time\nfind . -mtime -7    # Modified in last 7 days\nfind . -mtime +30   # Modified more than 30 days ago\n\n# Find files by permissions\nfind . -perm 644    # Files with 644 permissions\nfind . -perm -u+x   # Files executable by owner\n\n# Execute commands on found files\nfind . -name \"*.txt\" -exec rm {} \\;  # Delete all .txt files\nfind . -name \"*.log\" -exec mv {} logs/ \\;  # Move .log files to logs directory\n```\n:::\n\n\n## `xargs` - Execute Commands on Multiple Arguments\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Find and delete files\nfind . -name \"*.tmp\" | xargs rm\n\n# Find and copy files\nfind . -name \"*.txt\" | xargs cp -t backup/\n\n# Count lines in multiple files\nfind . -name \"*.txt\" | xargs wc -l\n\n# Search in multiple files\nfind . -name \"*.py\" | xargs grep \"import\"\n```\n:::\n\n\n# Shell Scripting Basics\n\n## Creating and Running Scripts\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create a script file\nnano my_script.sh\n\n# Make it executable\nchmod +x my_script.sh\n\n# Run the script\n./my_script.sh\n```\n:::\n\n\n## Basic Script Structure\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n# This is a comment\n\n# Set variables\nNAME=\"Linux User\"\nCOUNT=10\n\n# Use variables\necho \"Hello, $NAME!\"\necho \"Count is: $COUNT\"\n\n# Use command substitution\nCURRENT_DIR=$(pwd)\necho \"Current directory: $CURRENT_DIR\"\n\n# Use arithmetic\nRESULT=$((COUNT * 2))\necho \"Double count: $RESULT\"\n```\n:::\n\n\n## Control Structures\n\n### If-Else Statements\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n\nif [ -f \"file.txt\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File does not exist\"\nfi\n\n# String comparison\nif [ \"$1\" = \"hello\" ]; then\n    echo \"You said hello\"\nelif [ \"$1\" = \"goodbye\" ]; then\n    echo \"You said goodbye\"\nelse\n    echo \"You said something else\"\nfi\n```\n:::\n\n\n### Loops\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n\n# For loop\nfor i in {1..5}; do\n    echo \"Number: $i\"\ndone\n\n# For loop with files\nfor file in *.txt; do\n    echo \"Processing: $file\"\ndone\n\n# While loop\ncount=1\nwhile [ $count -le 5 ]; do\n    echo \"Count: $count\"\n    count=$((count + 1))\ndone\n```\n:::\n\n\n## File Manipulation Scripts\n\n### Q1: How to move files to subfolders\n\nI have many files inside a folder. I want to move them into two sub-folders named `f1` and `f2` (I made them using `mkdir -p f1 f2`). How to do that?\n\nThis is the way:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n# move_files.sh\n\n# Create subdirectories if they don't exist\nmkdir -p f1 f2\n\n# Counter for files\ni=0\n\n# Loop through all .fastq.gz files (sorted by version)\nfor file in $(ls *.fastq.gz | sort -V); do\n    if [ $i -le 400 ]; then\n        mv \"$file\" f1/\n        echo \"Moved $file to f1/\"\n    else\n        mv \"$file\" f2/\n        echo \"Moved $file to f2/\"\n    fi\n    i=$((i + 1))\ndone\n\necho \"File moving completed!\"\necho \"Files in f1: $(ls f1/ | wc -l)\"\necho \"Files in f2: $(ls f2/ | wc -l)\"\n```\n:::\n\n\nHere, I am sending `fastq.gz` files having 0-400 in their name to `f1` folder and remaining ones to `f2`. You just need to use your file naming pattern in the code block, and you are all set. For example, if you have many `.fasta` files, use `.fasta` instead of `.fastq.gz`. You got the idea, right?\n\n**How to execute/run this file now?**\nRun these:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nchmod +x move_files.sh\n./move_files.sh\n```\n:::\n\n\n`chmod +x` is making the file named `move_files.sh` executable. Then we are running it using `./move_files.sh`.\n\n# High Performance Computing (HPC) Basics\n\n## SSH Connection to HPC Clusters\n\nI am going to connect to Uni-Greifswald's Brain cluster.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nssh username@brain.uni-greifswald.de\n```\n:::\n\n\n**You have to use your real username and password.** Now, let's get an interactive session to the gpu compute node (it is named \"vision\" for uni-greifswald's gpu node, check for yours).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsrun --pty --gres=gpu:1 --partition=vision --mem=16g -t 12:00:00 bash -i\n```\n:::\n\n\nSo, I am taking the session for 12 hours.\n\n## Environment Management on HPC\n\n### Installing Conda on HPC\n\nLet's install conda for our environment management (if you don't have already).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Download the Miniconda installer for Linux\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\n# Run the installer, specifying the installation path\nbash Miniconda3-latest-Linux-x86_64.sh -b -p ~/miniconda_install/\n```\n:::\n\n\nNow, let's initialize conda:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Source the conda shell script to make the 'conda' command available\nsource ~/miniconda_install/bin/activate\n\n# Initialize conda for the current shell session.\nconda init bash\n```\n:::\n\n\nSince we're using an interactive session, we won't need to manually source anything after this. The `conda init` command makes it so we can use `conda` and `conda activate` as we normally would.\n\n**N.B. We could make some aliases for conda commands to write conda codes in shorter format, but we can do/see it later. Get used to the normal ones.**\n\n## Advanced Environment Setup\n\nLet's make an environment and install our required tools there. Well, our goal is to make a system where we will use some images/characters and make short videos using them to teach Italian. We need to process photos, images, text, and sync lips (video) with audio/speech. We need MuseTalk for this. Let's configure our environment accordingly.\n\n**Step 1 -- Create conda environment**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create new environment for MuseTalk\nconda create -n musetalk python=3.10\nconda activate musetalk\n```\n:::\n\n\n**Step 2 -- Install Dependencies**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Install PyTorch (adapt cuda version to your cluster, here CUDA 11.8 example)\npip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --extra-index-url https://download.pytorch.org/whl/cu118\n\n# HuggingFace core libs\npip install transformers accelerate diffusers safetensors\n\n# MuseTalk repo (clone)\ngit clone https://github.com/TMElyralab/MuseTalk.git\ncd MuseTalk\n\n# Install requirements\npip install -r requirements.txt\n\n# Install whisper encoder\npip install --editable ./musetalk/whisper\n\n# Extra: ffmpeg for video processing\nconda install -c conda-forge ffmpeg -y\n```\n:::\n\n\n**Step 3 -- Download MuseTalk Models**  \nMuseTalk Hugging Face repo: https://huggingface.co/TMElyralab/MuseTalk\nWe need:\n- musetalk.pth (main model) - gfpgan (optional face enhancer)\n\nRun inside MuseTalk:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir checkpoints\ncd checkpoints\n\n# Download core model\nwget https://huggingface.co/TMElyralab/MuseTalk/resolve/main/musetalk.pth\n\n# Optional face enhancer\ngit clone https://github.com/TencentARC/GFPGAN.git\ncd ..\n```\n:::\n\n\n## CUDA Environment Configuration\n\n### Better way:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nexport CUDA_HOME=/usr/local/cuda-11.7\nexport PATH=$CUDA_HOME/bin:$PATH\nexport LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH\n```\n:::\n\n\nIn my HPC Cluster, it is cuda 11.7. I am configuring for that. We could add these lines in my `~/.bashrc` file as well. We might see it later.\n\nLet's load our cuda module first to get things done smoothly.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule load cuda/11.7\n```\n:::\n\n\nNow, make the `yml` file to make the environment with all the tools required.\n\n```yaml\nname: musetalk3\nchannels:\n  - pytorch\n  - nvidia\n  - defaults\ndependencies:\n  - python=3.10\n  - pip\n  - ffmpeg\n  - pip:\n      # PyTorch + CUDA 11.8 compatible with 11.7 system\n      - torch==2.1.0+cu118\n      - torchvision==0.16.0+cu118\n      - torchaudio==2.1.0+cu118\n      - --extra-index-url https://download.pytorch.org/whl/cu118\n\n      # OpenMMLab dependencies\n      - mmcv==2.0.1 -f https://download.openmmlab.com/mmcv/dist/cu118/torch2.1.0/index.html\n      - mmdet==3.1.0\n      - gradio\n      - opencv-python\n      - numpy\n      - scipy\n      - matplotlib\n      - tqdm\n      - pyyaml\n      - pillow\n      - soundfile\n      - librosa\n      - moviepy\n      - imageio\n```\n\nSave this as `musetalk3.yml` and run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda env create -f musetalk3.yml\nconda activate musetalk3\n```\n:::\n\n\nNow, we have our environment ready to use. Let's use it.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nconda activate musetalk3\n```\n:::\n\n\nNow, install museetalk repo dependencies.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone https://github.com/TMElyralab/MuseTalk.git\ncd MuseTalk\npip install -r requirements.txt\n```\n:::\n\n\nLet's get the faces I want to use. I uploaded them to my Google Drive.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install gdown\n\n# Get shareable link from Google Drive and copy file id\ngdown https://drive.google.com/uc?id=FILE_ID -O data/faces/alice.jpg\ngdown https://drive.google.com/uc?id=FILE_ID -O data/faces/bob.jpg\n```\n:::\n\n\nModify the google drive links for the images and their destination name as you like it.\n\n### Real work\n\nNow, let's follow the author's guideline.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install --no-cache-dir -U openmim\nmim install mmengine\nmim install \"mmcv==2.0.1\"\nmim install \"mmdet==3.1.0\"\nmim install \"mmpose==1.1.0\"\n```\n:::\n\n\nLet's download the model's weight.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsh ./download_weights.sh\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Check ffmpeg installation\nffmpeg -version\n```\n:::\n\n\nThe conversation\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install TTS\n\n# Example: Alice speaking Italian\ntts --text \"Buon giorno, Bob! Come stai?\" \\\n    --model_name tts_models/it/mai_female/vits \\\n    --out_path alice_buongiorno.wav\n\n# Example: Bob replying\ntts --text \"Buon giorno, Alice! Va bene, grazie mille! Chi è questo?\" \\\n    --model_name tts_models/it/mai_male/vits \\\n    --out_path bob_risposta.wav\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}