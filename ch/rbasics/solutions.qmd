---
title: "HW solutions"
abstract: "dataframe, matrices, list, factor, vector, etc."
---
  
<style>
  .content {
    text-align: justify !important;
  }
  p {
    text-align: justify !important;
  }
  .quarto-body {
    text-align: justify !important;
  }
</style>

# L3: Matrices and Lists

## Task 1: Protein Quantification in Biological Samples

We measured the concentration (in Âµg/ÂµL) of three proteins (P1, P2, P3) in four samples (S1â€“S4):

### 1. Matrices

```{r}
# Making Protein Matrix
ProteinMatrix <- matrix(
  c(5, 3, 2,
    7, 6, 4),
  nrow = 2, byrow = TRUE
)
rownames(ProteinMatrix) = c("Sample1", "Sample2")
colnames(ProteinMatrix) = c("ProteinX", "ProteinY", "ProteinZ")
ProteinMatrix
```
Now goes the weight matrix

```{r}
# Making weight matrix
WeightVector <- matrix(
  c(0.5, 1.0, 1.5),
  nrow=3, byrow = TRUE
)
rownames(WeightVector) = c("ProteinX", "ProteinY", "ProteinZ")
colnames(WeightVector) = c("Weight")
WeightVector
```

Now, multiply them.

```{r}
# Multiplying Matrices
TotalConc = ProteinMatrix %*% WeightVector
colnames(TotalConc) <- "Total_Protein_Conc"
print(TotalConc)
```

### 2. Making transpose of ProteinMatrix

```{r}
ProteinMatTranspose = t(ProteinMatrix)
ProteinMatTranspose
```
### 3. Identity Matrix

```{r}
I <- diag(3)
Identitycheck = ProteinMatrix %*% I
colnames(Identitycheck) <- c("ProteinX", "ProteinY", "ProteinZ")
Identitycheck
```

### 4.1. Total Protein per Sample

```{r}
rowSums(ProteinMatrix)
```

### 4.2. Total Protein per Protein Type

```{r}
colSums(ProteinMatrix)
```

### 4.3. Heatmap of Protein Concentrations

```{r}
heatmap(ProteinMatrix, scale = "none", col = heat.colors(10))
```

### ðŸ§  Interpretation

- Multiplying the protein levels by the weight vector shows how much each protein contributes in a sample. The result shows total protein concentration per sample.
- The result shows that sample S2 has the highest protein burden.
- The identity matrix represents no protein interactions or measurement biases. It is a simple matrix calculation.
- New calculation:

```{r}
# changing the weight of ProteinZ to 3.0
newweightvector = matrix(
  c(0.5, 1.0, 3.0),
  nrow=3, byrow = TRUE
)
rownames(WeightVector) = c("ProteinX", "ProteinY", "ProteinZ")
colnames(WeightVector) = c("Weight")
newTotalconc = ProteinMatrix %*% newweightvector
colnames(newTotalconc) <- "Total_Protein_Conc"
newTotalconc
```
Still, S2 has more protein burden.

Bonus:

- Heatmap reveals PX is most abundant across all samples.

---

## Task 2: Gene-to-Protein Translation

```{r}
# making  Gene Expression matrix
GeneExpression <- matrix(
  c(10, 8, 5,
    15, 12, 10),
  nrow = 2, byrow = TRUE
)
rownames(GeneExpression) <- c("Sample1", "Sample2")
colnames(GeneExpression) <- c("GeneA", "GeneB", "GeneC")
GeneExpression
```

Translation efficiency:

```{r}
# making Translation Matrix
TranslationMatrix <- matrix(
  c(1.5, 0 , 0,
  0, 1.2, 0,
  0, 0, 1.8),
nrow = 3, byrow = TRUE
)

rownames(TranslationMatrix) <- c("GeneA", "GeneB", "GeneC")
TranslationMatrix
```

### Protein Output

```{r}
# computing Protein matrix
Protein_matrix <- GeneExpression %*% TranslationMatrix
print(Protein_matrix)
```
### 2. Transpose
```{r}
# Transpose of GeneExpression matrix
GeneExpression_Transpose <- t(GeneExpression)
GeneExpression_Transpose
```
The new matrix represnts a matrix where the rows and columns of GeneExpression matrix have been interchanged.

### 3. Identity matrix and multipliccation
```{r}
# Creating Identity matrix
I <- diag(3)
I
```
Now, multiply:
```{r}
Product_matrix = TranslationMatrix %*%  I 
Product_matrix
```
The product is identical to TranslationMatrix

### 4. Sub-matrix:
```{r}
# making submatrix A
A = matrix(
  c(10, 8,
    15, 12), nrow=2, byrow = TRUE
)
rownames(A) = c("sample1", "sample2")
colnames(A) = c("GeneA", "GeneB")

A

# finding inverse of A
#inv_A <- solve(A)
#inv_A
```
The inverse matrix could not be calculated since A is a singular matrix.
So, A * A^-1 is also not possible.

### Visualization tasks:

- 1. MARplot
```{r}
# generating MARplot-style scatter plot
plot(GeneExpression, Protein_matrix, type="p", main="Protein level vs. Gene Expression level")
labels <- "Sample-Gene"
text(GeneExpression, Protein_matrix, labels = labels, pos=3)
# generating a heatmap
heatmap(Protein_matrix, main= "Heatmap of Protein Level", Rowv = TRUE, Colv = TRUE, labRow= rownames(Protein_matrix), labCol= c("ProteinA", "ProteinB", "ProteinC"), col=topo.colors(256) )
```

- 2. Heatmap of Expression:

```{r}
heatmap(GeneExpression, col = terrain.colors(10), scale = "column")
```
### ðŸ§  Interpretation

1. Matrix multiplication allows each gene in both samples to be multiplied to their respective translation efficiency. So, the product shows how successfully each gene is translated")

2. The diagonal TranslationMatrix make sense biologically because they show translation efficiency of each gene and there is no other interaction between them. Although there could be interaction in real-world scenarios.

3. If Sample2 has higher protein levels even with similar gene expression, it means that more mRNAs are translated to proteins compared to Sample1"

4. The upward trend in MARplot may indicate an increase in translation efficacy and downward trend may indicate a decline in translation efficacy"

5. Clustering in the heatmap may suggest which samples are most similar to each other based on their prot.

---

## Task 3: Animal Breeding â€“ Bull Ranking by Economic Traits

### Define Data

```{r}
# Define Bull EBVs
BullEBVs <- matrix(c(
  400, 1.2, 0.8,
  500, 1.5, 0.6
), nrow = 2, byrow = TRUE)

rownames(BullEBVs) <- c("Bull1", "Bull2")
colnames(BullEBVs) <- c("Milk_yield", "Growth_rate", "Fertility")

# Define Economic Weights
EconomicWeights <- matrix(c(0.002, 50, 100), ncol = 1)
```
### Compute Total Economic Value

```{r}
TotalValue <- BullEBVs %*% EconomicWeights
TotalValue
```

**Interpretation**

Bull1: (400 Ã— 0.002) + (1.2 Ã— 50) + (0.8 Ã— 100) = 140.8

Bull2: (500 Ã— 0.002) + (1.5 Ã— 50) + (0.6 Ã— 100) = 136.0

Bull1 is more valuable economically.

**Biological Interpretation**

Economic weights convert genetic merit (EBVs) into economic merit. Traits with higher financial importance have a larger impact, regardless of absolute EBV values.

### Multiply with Identity Matrix

```{r}
I3 <- diag(3)
BullEBVs_identity <- BullEBVs %*% I3
BullEBVs_identity
```

**Interpretation**

Multiplying by identity matrix returns the original matrix. It confirms that EBV structure is preserved.

### Remove Milk Yield and Recalculate Total Value

```{r}
BullEBVs_noMilk <- BullEBVs[, -1]
EconomicWeights_noMilk <- EconomicWeights[2:3, , drop = FALSE]

TotalValue_noMilk <- BullEBVs_noMilk %*% EconomicWeights_noMilk
TotalValue_noMilk
```

**Interpretation**

Bull1: (1.2 Ã— 50) + (0.8 Ã— 100) = 140

Bull2: (1.5 Ã— 50) + (0.6 Ã— 100) = 135

Bull1 still ranks higher, but by a smaller margin.

### Bar Plot: Total Economic Value

```{r}
barplot(
  TotalValue,
  beside = TRUE,
  names.arg = rownames(BullEBVs),
  col = c("skyblue", "orange"),
  main = "Total Economic Value of Bulls",
  ylab = "Total Value"
)
```

### Heatmap of EBVs

```{r}
heatmap(
  BullEBVs,
  Rowv = NA,
  Colv = NA,
  scale = "none",
  col = heat.colors(256),
  main = "Heatmap of Bull EBVs"
)
```

### ðŸ§  Interpretation Questions

- How do economic weights affect trait importance?

Traits with higher weights contribute more to the total economic value. This makes them more influential in ranking and selection.

- Why might you ignore milk yield?

Milk yield may be excluded in systems focusing on fertility, growth, or when it is no longer a limiting factor. Environmental or economic contexts may also shift trait priorities.

- What is the value of heatmaps?

Heatmaps visually compare EBVs across bulls and traits.They help detect patterns, outliers, and clusters easily in multivariate data.

- Can this method be extended to more bulls and traits?

Yes. This method scales to any number of bulls or traits. Just ensure the EBVs matrix and economic weights are dimensionally compatible.


## Task 4: Plant Breeding â€“ Trait Contributions from Parental Lines

### Define Data

**Parent trait values (normalized 1â€“10)**
```{r}
ParentTraits <- matrix(c(
  7, 5, 3,
  6, 8, 4,
  5, 6, 6
), nrow = 3, byrow = TRUE)

rownames(ParentTraits) <- c("P1", "P2", "P3")
colnames(ParentTraits) <- c("Drought_resistance", "Yield", "Maturation_time")

# Define Hybrid Weights
HybridWeights <- matrix(c(0.5, 0.3, 0.2), nrow = 1)
```

### Compute HybridTraits Vector

```{r}
HybridTraits <- HybridWeights %*% ParentTraits
HybridTraits
```
**Interpretation**

HybridTraits = (0.5 Ã— P1) + (0.3 Ã— P2) + (0.2 Ã— P3)

Drought_resistance = (0.5 Ã— 7) + (0.3 Ã— 6) + (0.2 Ã— 5) = 6.2

Yield = (0.5 Ã— 5) + (0.3 Ã— 8) + (0.2 Ã— 6) = 6.1

Maturation_time = (0.5 Ã— 3) + (0.3 Ã— 4) + (0.2 Ã— 6) = 3.7

The hybrid is moderately strong in drought resistance and yield, but has a relatively shorter maturation time.

**Biological Meaning of Unequal Contribution**

When one parent contributes more to a trait, it suggests that the trait's heritable strength comes disproportionately from that parent. Breeders can use this knowledge to amplify desirable traits.

### Multiply with Identity Matrix

```{r}
I3 <- diag(3)
ParentTraits_identity <- ParentTraits %*% I3
ParentTraits_identity
```

**Interpretation**

Multiplying by identity matrix returns the original matrix. This operation verifies structural consistency and dimensionality.

### Remove T3 (Maturation Time) and Recalculate

```{r}
ParentTraits_T1T2 <- ParentTraits[, 1:2]
HybridTraits_T1T2 <- HybridWeights %*% ParentTraits_T1T2
HybridTraits_T1T2
```

**Interpretation**

Drought_resistance = (0.5 Ã— 7) + (0.3 Ã— 6) + (0.2 Ã— 5) = 6.2

Yield = (0.5 Ã— 5) + (0.3 Ã— 8) + (0.2 Ã— 6) = 6.1

Removing a trait (T3) changes the trait profile. Hybrid selection may now favor traits that remain.

### Heatmap of ParentTraits

```{r}
heatmap(
  ParentTraits,
  Rowv = NA,
  Colv = NA,
  scale = "none",
  col = heat.colors(256),
  main = "Heatmap of Parent Traits"
)
```

### Bar Plot of Hybrid Traits

```{r}
barplot(
  HybridTraits,
  beside = TRUE,
  names.arg = colnames(ParentTraits),
  col = c("#66c2a5", "#fc8d62", "#8da0cb"),
  main = "Hybrid Trait Profile",
  ylab = "Trait Value"
)
```

### ðŸ§  Interpretation Questions

- How does the weighting of parents affect the hybrid's performance?

  Stronger weights mean more genetic contribution. Traits from highly weighted parents dominate the hybrid profile.

- What does the identity matrix represent here?

  It represents a neutral transformation. It confirms data integrity when used in matrix multiplication.

- If you used equal weights (â…“ for each), how would the hybrid traits change?

  Traits would reflect an even mix, potentially leading to balanced but less specialized performance.

- What real-world limitations does this simplified model ignore?

  i. Non-additive genetic effects (dominance, epistasis)

  ii. Environmental interactions

  iii. Trait heritability and correlations

  iv. Breeding feasibility and cost

## Task 5: Managing Matrices and Weight Vectors Using Lists in R

Now that we've explored trait-based decisions using matrices, it's time to organize our work using R's list structure. Lists help bundle related objects like matrices and weight vectors, keeping the analysis modular and scalable.

### Create a Master List

```{r}
# Assuming previous matrices and weights are already defined:

# Making a MasterList
bioList = list(
  ProteinConc = list(matrix = ProteinMatrix, weights = WeightVector),
  ProteinMap  = list(matrix = GeneExpression, weights = TranslationMatrix),
  Animal = list(matrix = BullEBVs, weights = EconomicWeights),
  Plant = list(matrix = ParentTraits, weights = HybridWeights)
)

print(bioList)
```

### List the Structure

```{r}
names(bioList)               # Top-level list names
lengths(bioList)             # Number of components in each sublist
```

**Interpretation**

Each top-level entry (e.g., ProteinConc, Plant) contains two components:

- A matrix (e.g., ProteinMatrix)
- A corresponding weight vector or matrix

### Indexing Elements from Lists

```{r}
# Access the trait matrix for Plant
bioList$Plant[[1]]
#or
bioList$Plant$matrix

# Access the weight vector for ProteinConc
bioList$ProteinConc[[2]]
#or
bioList$ProteinConc$weights
```

**Interpretation**

Use double brackets [[ ]] to extract unnamed list elements by position. But we named our list, so they are easily extractable using the `$` notation.

### Perform Weighted Calculations

```{r}
# Protein concentration score
bioList$ProteinConc$matrix %*% bioList$ProteinConc$weights

# Gene â†’ Protein contribution
bioList$ProteinMap$matrix %*% bioList$ProteinMap$weights

# Bull economic value
bioList$Animal$matrix %*% bioList$Animal$weights

# Hybrid trait value
bioList$Plant$weights %*% bioList$Plant$matrix
```

### Subset and Recalculate

```{r}
# Remove last trait from ParentTraits
ParentSubset <- bioList$Plant$matrix[, 1:2]
NewWeights <- matrix(c(0.6, 0.4), nrow = 2)

# Recalculated hybrid score
SubsetHybridScore <- ParentSubset %*% NewWeights
SubsetHybridScore
```

**Interpretation**

Dropping a trait and reweighting highlights its influence in trait aggregation and selection.

### Visualization Tasks

#### Heatmap: Gene Expression

```{r}
heatmap(
  bioList$ProteinMap$matrix,
  scale = "none",
  col = heat.colors(256),
  main = "Gene Expression Heatmap",
  xlab = "Proteins",
  ylab = "Genes"
)
```

#### Bar Plots

##### Hybrid traits

```{r}
barplot(
  bioList$Plant$weights %*% bioList$Plant$matrix,
  beside = TRUE,
  main = "Hybrid Trait Contributions",
  col = "#66c2a5",
  ylab = "Score"
)
```

##### Bull EBV (Economic Breeding Values)

```{r}
barplot(
  bioList$Animal$matrix %*% bioList$Animal$weights,
  beside = TRUE,
  main = "Bull EBVs (Economic Values)",
  col = "#fc8d62",
  ylab = "Score"
)
```

### ðŸ§  Interpretation Questions

- Why use a list structure?

Keeps each dataset and its weights together.
Facilitates automated workflows and reuse.

- Whatâ€™s tricky about `[[ ]]` access?

You must remember the order (`[[1]]` = `matrix`, `[[2]]` = `weights`).
No names means you can't use $matrix, only positional access.

Loop across all list entries

Weighted scores for all entries
`lapply(bioList, function(x) x[[2]] %*% x[[1]])`

- How does this help in large-scale pipelines?

You can use this format with `lapply()`, `purrr::map()`, or in targets pipelines for reproducibility and modular processing.
