---
title: "Git and CLI"
abstract: "Git, GitHub and some basic shell commands"
format: html
execute:
  echo: true
  eval: false  # disables code execution globally
---

```{r}
#| include: false
source(here::here("src/helpersrc.R"))
```
# Prelude  
Well, why `git`and `command line` at the very beginning? I want you to be able to interact with me for all the lessons, take part in the discussion and make you competent with basic tasks (`push`and `pull`). You actually need 4-5 lines of code to push and pull. You will associate bash alternatives to Windows' Graphical User Interphase (GUI, which is mouse clicking). Just get used to these stuffs. You will get the sense of accomplishment everyday. You know what, people get demotivated just because they don't get the sense of accomplishment. Smaller task completion helps to pile up "done" things. I am here holding your hands. Don't afraid to tinker and ponder around. You can always delete the problematic folder(s).  
  
You can push the codes/scripts from the classes or your own practice codes. You will FEEL better and stronger after a bit of hustling!

**_`GET ENGAGED!`_**

# Intro  

GitHub is just like Google Drive, Dropbox or similar where you can `upload` (or `push`) files and folders of your project/package. What is special about the GitHub repositories then? Well, they are tracked for changes. How so? Well, `git` does that. `git` is the version control system (or tool) to track changes you make in a specific directory/repository (directory means folder as well). So you can have snapshot of your changes and fall back and forth if needed.  

**Imagine this situation:** You made a working version of whatever you are doing/making. But then you were trying to polish it more. And alas, your so-called polishing is messing you up! You don't know what is wrong! You closed the file many times and you can't just `undo` and `redo` things. What would you do now except cursing (or other similar behavior of frustration)? Here comes `git` in your rescue. It kept the snapshot of your previous working version(s) in GitHub (if pushed) and you can easily fall back and forth (`clone`/`download`/`pull` it in your machine again). Maybe, the terms "upload" and "download" make a bit more sense, rather than `push` and `pull`/`clone`! But you got the idea (equivalent), right?

# Set git and GitHub

## Install Git

### For Windows

-   **Download:** Download `Git` from <https://git-scm.com/download/win>
-   **Install:** Now install, accept the default settings while installing
-   **Open git bash:** After installation, open `Git Bash` (not cmd/PowerShell). Find it and open by double clicking. Just keep it open, nothing else. We will return to this a bit later.

### For MacOS

It should already be there. Open your terminal/shell now (Press `"command"` + `"space"` buttons together and write "terminal". Choose the terminal). Then run:

```{bash, eval=FALSE}
git --version
```

If Git isn’t installed, macOS will prompt you to install the Xcode Command Line Tools. Click "Install" and you are done. But find the recommended below. Just run these two commands to keep your directory/repo clean.

```{bash, eval=FALSE}
echo .DS_Store >> ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global
```

MacOS makes `.DS_Store` which is not really needed for any projects (this is just an internal thingy for MacOS). But to make it work, you should have choosed the option for a gitignore file while opening the GitHub repository. We will know more about it later. Don't worry. We are adding it to gitignore and telling git to ignore it for file tracking.

### For Ubuntu/Debian

Open your terminal (Press `Ctrl + Alt + T`.) and run these two commands one after another:

```{bash, eval=FALSE}
sudo apt update
sudo apt install git
```

Provide your password if prompted. You are all set!

## Create a GitHub Account

-   Now go to <https://github.com> -> Sign up with your email
-   Choose a username and password. Make the username easy to remember (for example, with your names, maybe), password should be as difficult as possible.  

Hint, it can be different than your email password. Use combination of capital and small letters, numbers and special characters like "@", "!", "?", etc.  

- Verify email (with hte OTP) and you are set.

## Set Up Git (for the first time only)

```{bash, eval=FALSE}
git config --global user.name "Your Name"
git config --global user.email "your_email@example.com"
```
::: callout-warning
## Stop!
Here, `Your Name` and `your_email@example.com` means your user name (the one you set up just a bit ago. You don't remember? Explore your GitHub account, you will see it there.) and the email address you used for GitHub. Use them correctly. Space, punctuation marks, capital or small letters should exactly match (Don't be a "Murad takla").
:::

You can check your config:

```{bash, eval=FALSE}
git config --global --list
```

Isn't it showing things correctly? It should!

## Generate SSH Key and Connect to GitHub 

**Recommended, need to do only once**  

:::callout-warning
# Stop!
This step is creating a private and public key for you to identify that it is really you who is interacting (pushing, pulling, cloning for example) with the GitHub account later. We only upload the public key to GitHub, but never the private key. That is exclusively for yourself. Never share it with anybody.  
:::

```{bash, eval=FALSE}
ssh-keygen -t ed25519 -C "you@example.com"
```
**Read and just press Enter for all the prompts**  

::: callout-warning
## Stop!
Did you replace `you@example.com` with yours? If not, do it again replacing it with correct email address for your GitHub account.
:::

::: callout-warning
## Stop!
Did you press Enter or return key multiple times or just kept staring at the screen? Read the messages on your screen to understand, and keep pressing Enter.
:::

## Add SSH Key to GitHub  
Now, we are going to add the public key to GitHub. But do we know it? Get it this way:  

1.  Run:

```{bash, eval=FALSE}
cat ~/.ssh/id_ed25519.pub
```

2.  Copy the output: Be careful here. Just copy the output. No extra space after your email address (i.e. till `.com`).

::: callout-warning
## Stop!
Did you copied it correctly? Check again, maybe.
:::


::: {.callout-note collapse="true"}
## How is your key?
It has 3 fields separated with 2 spaces. Did you notice that?
:::

3.  Go to GitHub --> Settings --> SSH and GPG keys --> New SSH Key

**Title:** Whatever you want (but keep it simple, like `my ssh key`)  
**Paste the key** you copied and save it by clicking on `Add SSH key`. You are done.  

::: callout-warning
## Stop!
Did you copy-pasted it correctly and is the key visible if you check under `SSH and GPG keys` now? It shows only the second field of your key though. If not, it is not done correctly. Work around!
:::

4.  Test it:

```{bash, eval=FALSE}
ssh -T git@github.com
```
::: callout-note
## How is it?
Hi `Your_user_name`! You've successfully authenticated, but GitHub does not provide shell access. 
:::
It is totally fine, ignore the warning.  

Setting and configuration is done. Voila!

# Basic Git Workflow (Local + GitHub)

### Create a New Repository on GitHub

1. Go to your GitHub account --> Find the `+` sign and click on it --> Click on `New Repository`. Or there is another way. Find it.
2. Name it (e.g., test1).
3. Don’t initialize with README (we’ll do it ourselves). You can decide to add a `.gitignore` template from the drop-down as well. But don't do it now.
4. Keep it public (as the default setting).
5. Save it by clicking on `Create repository`.

### Clone It to Your Computer Now:
So, the repository (basically a folder in GitHub) is in GitHub server. It is not in your machine. Let's copy it exactly how it is in our computer. 

- At first, go to correct location you want to be in. For example, let's say, you want to be inside the `Downloads` folder. Run this:

```{bash, eval=FALSE}
cd Downloads
```
::: callout-note
## Information
It works because you are inside the home/root directory (denoted as `~`) when you just open the terminal or git bash. 
:::

Well, If you want to be inside the `Desktop` or `Documents` folder, you could run `cd Desktop` or `cd Documents` instead of the one for `Downloads`. You got the idea for the navigation, right? Just use the correct folder name.
Now, go to your GitHub repo. Click on `<>Code` and select `SSH` (or find the SSH link of your repo). Copy the link from there. Use/replace the link in the code below:

```{bash, eval=FALSE}
git clone git@github.com:yourusername/test1.git
```
::: callout-warning
## Warning
Did you replace the `git@github.com:yourusername/test1.git` with your copied ssh link?
:::

So, you are copying/cloning your empty repository you just have created to your laptop/machine. Good job! Ignore the warning from `git`. The warning is ok, right?

### Add a new `README.md` file

Let's add a new README.md file to our empty repo now. Poeple add basic information about the repo in this file. But it is something simple for us for now. Let's proceed!  


```{bash, eval=FALSE}
cd test1 
echo "# Hello GitHub" > README.md
ls
```
::: callout-note
## Information
So, it is a new file we created, right? It is on our computer, but not in our remote (GitHub) repository. So, let's proceed to upload/`push` it to our GitHub repo named `test1`. It won't go to other repo. Think about the logic. Why should it go to other repo/folder, right?
:::

::: callout-note
## Diversion
`echo "# Hello GitHub"` actually prints `# Hello GitHub` on the terminal/git bash (you can check/run by copy-pasting only this part). The `>` operator is sending `# Hello GitHub` to the file named `README.md`. We did not need to create this file from before. See the power of `echo`, `>` together.
:::

### Track and Commit Changes  
We said `git` is a tracking tool (version control system). So, let's see how it tracked our `test1` folder. 

```{bash, eval=FALSE}
git status
```
Isn't it showing that our `README.md` file is untracked (in red color)?  

::: {.callout-note collapse="true"}
It shows the status of the files and folders. You see the untracked files here. Untracked files mean the ones those are different than your GitHub repo. If you add something more in any of your file in this folder -- even an extra space, it would be a change of the file and it would be stated as "untracked". 
:::

```{bash, eval=FALSE}
git add README.md
```

It stages/prepares the untracked files to be added.

```{bash, eval=FALSE}
git commit -m "Add README"
```

You add a meaningful commit message for yourself to remind you what you did in this step (a decoration). Make it meaningful. But all these steps are still on your local machine. You have prepared (by using `git add`) and decorated (by using `git commit -m`) your file(s). You are just one step away to `push` it to your remote repo. Just run the command below, and feel like a soft-dev!

### Push to GitHub

```{bash, eval=FALSE}
git push origin main
```

Go to your GitHub repo to see the changes. Refresh your browser, maybe.  

::: callout-note
`git status` is not a compulsory thing to do/run, but the other 3 downstream commands are.
In summary, you should always run these 3 commands to push something:
:::

```{bash, eval=FALSE}
git add README.md    # Stage the specific file named README.md
git commit -m "Add README" #you added a meaningful message for yourself
git push origin main #push it now to main branch
```
::: callout-note
## What are the things with `#` sign?
Those are comments to tell you about the commands task (or anything). One just need to write a `#` sign to make it a comment in R.
:::

Well, if you have added or created many files and folders inside this `test1` folder (in whatever way), you should run:

```{bash, eval=FALSE}
git add .
```

The `.` means **"everything"** inside the current folder/directory. Well, you could run it all the time instead of mentioning specific file name (i.e. `README.md`) earlier.  
  
::: callout-note

## Note  
You can add and push as many files as you want. Just create/modify them inside the correct folder/directory and instead of `git add README.md`, use `git add .` when you think you're done modifying. The dot here means all the files/folders. Then you could follow the next steps as usual. So, you could do:
:::

```{bash, eval=FALSE}
git add .
git commit -m "a meaningful message for you"
git push origin main
```
::: callout-important
Did you replace `"a meaningful message for you"` to a real meaningful one for you?
:::

Check your GitHub repo now! Refresh, maybe!  

*You are feeling like a PRO, no?*  

Let's practice some more Linux navigation. See a toy folder structure below:  

```text
~/
├── Desktop/
│   ├── project_overview.pdf
│   └── meeting_notes.txt
├── Documents/
│   ├── resume.docx
│   ├── thesis/
│   │   ├── chapter1.md
│   │   └── references.bib
│   └── tax_2024.xlsx
└── Downloads/
    ├── folder1/
    │   ├── file1.txt
    │   ├── file2.txt
    │   └── notes.md
    ├── folder2/
    │   ├── data.csv
    │   ├── report.docx
    │   └── image.png
    └── folder3/
        ├── script.sh
        ├── config.json
        └── README.md
```
::: callout-important
If you had your git bash opened from before, close it and reopen it. Notice that there is no folder names after `~` sign in your git bash.  
:::

In real life, you have many more things like `Pictures`, `Video`, `Music` and others under `~`,  right? That's why it is a toy example.  

So, `Downloads` is inside our `~` directory. We are inside our `~` directory when we open the git bash or terminal for the first time.  

::: callout-important
`HOME`or `root` directory is shown as `~` in your computer. Notice the things in different color in your terminal or git bash where you write commands.
:::
Check your location (current working directory) by running:
```{bash, eval=FALSE}
pwd
```
`pwd` means "print working directory". It means print one's current location in the file system.
Then we should try to see which files are inside this folder, right? Run: 

```{bash, eval=FALSE}
ls
```

::: callout-note
`ls` means list everything at that location/folder. According to the picture, we can go to `Downloads` or `Documents` or `Desktop` folder from `~` (it is also called `root`. Isn't the folder structure looks like a upside-down tree? That's why it is the `root`).  

Let's say we are focusing on the `Downloads` folder now. Let's go inside `Downloads`. Wait a moment. How would you do that in Windows? You would see `Downloads` now and would double click on it, right (open your file explorer from Windows to see things while reading and running commands to associate better)? But there is no double click in a git bash or terminal. `cd` does it for us. Do you see what is equivalent to that double click? Do you see what is equivalent to seeing the file in Windows and folder structure in the git bash or terminal? It's not so difficult. Think......  

Ok, follow me exactly now, run these commands:
:::

```{bash, eval=FALSE}
mkdir -p Downloads/folder1 Downloads/folder2 Downloads/folder3
ls Downloads
```

I assume you have many files and folders inside `Downloads`. But you should see `folder1`, `folder2`, `folder3` among others now. Don't worry. Just run it. We are using `-p` flag/parameter with `mkdir` command. It says `mkdir` to make the directories, but if the folder name(s) exist, don't make any changes there. So, your files and folders are safe. But did you notice that I used the folder name `Downloads` after `ls` command now? Well, where are we? Inside the root directory (`~`), right? Since we are at our root directory, if we run only `ls`, it will list everything inside the root (`~`) directory. Did we wanted that? So, we have to write the folder name/path and `Downloads` is just a step forward from `~`. That's why we used `ls Downloads` to list everything inside the `Downloads` folder. We could go inside `Downloads` folder first and then run `ls` only. We would achieve the same thing (try it if you want and come back to the `root` directory again).  

`Downloads` is just one-step ahead from our root, do you catch this logic? If you wanted to list everything inside the `folder3` folder, you could run `ls Downloads/folder3` from the `~` directory. Do you see its logic? If not, think about this:  

- How far your father's generation is from your grandfather?  
- How behind your grandfather's generation is from your father?  
- How far your generation is from your grandfather's?  
- How far your generation is from your father's?  
- How behind your father's generation is from yours?  
- How behind your grandfather's generation is from yours?
- Isn't the generation of your father, aunt(s) and uncle(s) the same? What about yours, your sisters and brothers or causins?
  
Think of family tree, filesystem is having exactly the same logic. Try to associate.  
  
In our toy example above, `folder1`, `folder2`, `folder3` are on the same level/generation (they are children of `Downloads`, and `Downloads` is their parent). Similarly, `Downloads`, `Documents` and `Desktop` are on the same level (children of `~`, so they are siblings). Makes sense? 

Do you see how powerful this simple navigation logic is? You can go way too far (folder inside folder inside folder inside folder ....... [or folder outside folder outside folder outside folder ......]) from where you are.  
  
  
**Optional:** Maybe search for `absolute path` and `relative path`, and read a bit.

Let's go inside `Downloads` now.

```{bash, eval=FALSE}
cd Downloads
ls
```

::: {.callout-note collapse="true"}  

`ls` is equivalent of seeing things inside a folder in Windows. Did you catch that?
:::

`ls` now shows `folder1`, `folder2`, `folder3` among many other things, right?

**Q.** How to go inside, let's say, `folder2` now, and make a file named `data.csv` file? Well, since you are already inside `Downloads`, you need to go one step forward to go inside of it and create the (empty) file. Run one after another:

```{bash, eval=FALSE}
cd folder2
touch data.csv
```

**Do you see what `touch` is doing?** 

::: {.callout-note collapse="true"}  

Well, `touch` is creating the file (named `data.csv`). Run `ls` to see who else is the resident there. As expected, no?
:::

*Q.* How to come out of `folder2` to `Downloads` again?  
  
::: {.callout-note collapse="true"}  

Think backward now, see the picture for the folder structure to get visual help. You need to go one step behind, right? So? How to go backwards?
:::

Run this:

```{bash, eval=FALSE}
cd ..
```

**Could you relate what `..` is meaning here?**  
  
::: {.callout-note collapse="true"}  

Well, one step/folder backward, right?
:::
  
::: callout-note

Ahha.... Wondering why do we have `/` after the folder names? Well, that is the way to denote a folder. We could use `ls Downloads/`, but we dropped the `/` since we are not denoting any more folder after `Downloads`. If you want to see things inside `folder3`, we should have use `ls Downloads/folder3` or `ls Downloads/folder3/` from the `~` directory, we could not do it like `ls Downloadsfolder3` or `ls Downloadsfolder3/`. Now it is looking for `Downloadsfolder3` folder which is not there in your computer. You will get error.  
  
**Another point:** Did you notice that `ls Downloads/folder3` is just listing everything inside `Downloads/folder3` on the fly, we are not really changing our physical location there, we are still in `~`. To go inside `folder3`, we should use `cd Downloads/folder3`. Caught this correctly? Ponder....
:::

## Homeworks  

1.  Go inside `folder1`, `folder2`, `folder3` folders one after another and create the empty files as you see in the picture (with exact names). If you can do it, you are almost a PRO in Linux/command line.  
  
2. Now, remove all the folders running this command below:

```{bash, eval=FALSE}
rm -r folder1 folder2 folder3
```

Here, `rm` means "remove" and `-r` means "recursively". So, delete the 3 mentioned directories recursively. It needs to recurse since the folders are not empty (have files, although empty for us. But they can have contents as well). Deleting/just running the command is your task. Did it work?  

3. Make all the folders and files as it is shown in the toy file structure again. Don't delete this time. Keep them.   
4. Navigate to `Downloads` again. Stay there. Next task is coming.   
5. Go to your GitHub account and make a repository named `hw_repo1`. **Clone** it inside your `Downloads` folder (navigate to this folder correctly after cloning). Add something (files, folder, whatever) in this folder (`hw_repo1`) and push following the standard workflow. Make as many changes and pushes you like.  
  
6. Go to your GitHub account again and make a repository named `hw_repo2`. **Clone** it inside your `Downloads` folder (you know how to be inside `Downloads`, right?) again (go inside the `hw_repo2` folder correctly after cloning, you know how). Add something (files, folder, whatever) in this folder (`hw_repo1`) again and push following the standard workflow. Make as many changes and pushes you like.  
  
7. You learned these bash commands today:

- `pwd`
- `ls`
- `cat`
- `echo`
- `mkdir`
- `cd`
- `rm`
- `touch`
  
  
Can you relate them with Windows alternatives? I am giving a hint for `touch`. `touch` is the alternative of naming a new file while creating in Windows. Windows is doing it visually to help us (using different tools though, for example, Microsoft Words for `.docx` files. You can't name a file like `file_name.jpeg` using Microsoft Words, though. Right? You need some other tools for that image file naming (`.jpeg`). But bash or terminal has no apparent limit). Think of the other commands now. Can you make a mind map of which command comes before or after which one if you are navigating your folders and creating some empty CSV files and inserting content in those files? For example, **a scrambled list of the alphabets** becomes **A > B > C > D > E > ..... > Z** if we organize them, right? Or a map of **Father, Son, Grandson, Me, My_Siblings, Grandma** will be **Grandma > Father > Son > Me + My_Siblings > Grandson** if we think of generations, right? Try to make one for those commands and add it in a file inside one of your `hw_repo*`. `echo` it in a file, make a .doc, .ppt, .png/jpeg/jpg or .txt file or whatever. I don't mind. GitHub also doesn't care what you are pushing to it (it is just a storage with special functionality to track files -- well, some more though, we will know later). Let's see. If you need help, don't hesitate to reach out! There is no shame in asking for help while learning.  
  
8. Optional: Navigate your other folders as well. Catch the logic of navigation. Also, can you make a list of words I used alternatively (back and forth) and maybe add them in one of your homework repo again? For example, folder and directory are the same thing; similarly, `HOME`, `root` and `~` are the same.   
  
9. Share your repos with me (**email me by Friday 10PM BD Time**). I need time to check, right? Help me here....  

# Final Thought   

You might not know how powerful you are becoming! But trust me, you are too strong.......
